{
    "description": "PerimeterX related Fastly VCL code to enable the PerimeterX Enforcer. Before installing this module confirm that Fastly has enabled PerimeterX support for your Fastly service. Additional details can be found in the PerimeterX documentation, https://docs.perimeterx.com/pxconsole/docs/fastly-magento2-installation",
    "id": "perimeterx_bot_defender_integration",
    "name": "PerimeterX Bot Defender Integration",
    "properties": [
        {
            "description": "PerimeterX Application ID",
            "label": "Application ID",
            "name": "px_app_id",
            "required": true,
            "type": "string"
        },
        {
            "description": "PerimeterX Application ID Without the Preceding PX",
            "label": "Application ID No PX",
            "name": "px_app_id_no_px",
            "required": true,
            "type": "string"
        },
        {
            "description": "PerimeterX Authentication Token",
            "label": "Authentication Token",
            "name": "px_auth_token",
            "required": true,
            "type": "string"
        },
        {
            "description": "PerimeterX Risk Cookie Secret",
            "label": "Cookie Secret",
            "name": "px_risk_cookie",
            "required": true,
            "type": "string"
        },
        {   
            "description": "PerimeterX Module Status",
            "default": "1",
            "label": "Module Status",
            "name": "px_module_status",
            "required": true,    
            "options": {
                "0": "Module Disabled",
                "1": "Module Enabled"          
            },
            "type": "select"
        },  
        {    
            "description": "PerimeterX Blocking Mode",
            "default": "0",
            "label": "Blocking Mode",
            "name": "px_blocking_mode",
            "required": true,    
            "options": { 
                "0": "Monitor mode async Server-to-server requests are sent asynchronously",
                "1": "Monitor mode sync Module may not block users. Server-to-server requests are sent synchronously",
                "2": "Active mode Module may block users. Server-to-server requests are sent synchronously",
                "3": "Monitor mode with rate limiting Module will only block users that exceeded rate limit. Server-to-server requests are being sent synchronously"
            },
            "type": "select"
        }
    ],
    "test": {
        "origins": [
            "https://httpbin.org"
        ],
        "reqUrl": "/status/500"
    },
    "vcl": [
        {
            "priority": 1,
            "template": "\ntable px_configs {\n    \"ADD_BLOCK_RESULT_HEADER\": \"0\",\n    \"APP_ID\": \"{{px_app_id}}\",\n    \"AUTH_TOKEN\": \"{{px_auth_token}}\",\n    \"BLOCK_ALL_SIZE_EXCEEDED_POST_REQUESTS\": \"0\",\n    \"BLOCK_SIZE_EXCEEDED_15K_HEADERS_SIZE\": \"1\",\n    \"BLOCK_SIZE_EXCEEDED_POST_REQUESTS_BY_SIZE\": \"0\",\n    \"BLOCK_SIZE_EXCEEDED_POST_REQUESTS_SPECIFIC_ROUTES\": \"0\",\n    \"COOKIE_SECRET_KEY\": \"{{px_risk_cookie}}\",\n    \"CSP_ENABLE\": \"0\",\n    \"CSS_REF\": \"\",\n    \"CUSTOM_LOGO\": \"\",\n    \"DEBUG_SYSLOG_NAME\": \"PX-Debug\",\n    \"ENABLE_ACCESS_CONTROL_HEADER\": \"0\",\n    \"ENABLE_BLOCK_SPECIFIC_ROUTES\": \"0\",\n    \"ENABLE_CAPTCHA\": \"1\",\n    \"ENABLE_COOKIE_FROM_HEADER\": \"0\",\n    \"ENABLE_DEBUG\": \"0\",\n    \"ENABLE_ERROR\": \"0\",\n    \"ENABLE_MODULE\": \"{{px_module_status}}\",\n    \"ENABLE_PRE_CLEAN\": \"0\",\n    \"ENABLE_SENSITIVE_ROUTES\": \"0\",\n    \"ENABLE_SPECIFIC_ROUTES\": \"0\",\n    \"ENABLE_WHITELISTED_ROUTES\": \"0\",\n    \"FIRST_PARTY_MODE\": \"1\",\n    \"JS_REF\": \"\",\n    \"MODULE_MODE\": \"{{px_blocking_mode}}\",\n    \"PXHD_SECURE\": \"0\",\n    \"PX_ENABLE_LOGIN_CREDS_EXTRACTION\": \"0\",\n    \"PX_SYSLOG_NAME\": \"PX-Syslog\",\n    \"REDIRECT_XHR\": \"1\",\n    \"REMOTE_BLOCK_ENABLE\": \"0\",\n    \"REMOTE_BLOCK_MAX_SIZE\": \"1000\",\n    \"REMOTE_DATA\": \"0\",\n    \"SEND_PAGE_ACTIVITIES\": \"1\",\n    \"USE_SINGLE_BACKEND\": \"1\"\n}\n\ntable cs_data {\n  # \"eng_key\": \"put here a Fastly API key with engineer permission\",\n  # \"px_csp_rdata_id\": \"put here px_csp_rdata edge-dictionary id\",\n  # \"px_block_rdata_id\": \"put here px_block_rdata edge-dictionary id\"\n}\n\ntable px_csp_rdata {\n}\n\ntable px_block_rdata {\n}\n\ntable px_login {\n}\n\nbackend PX_API {\n  .connect_timeout = 1s;\n  .dynamic = true;\n  .port = \"443\";\n  .host = \"sapi-{{px_app_id}}.perimeterx.net\"; # SET APPID HERE\n  .ssl_sni_hostname = \"*.perimeterx.net\";\n  .first_byte_timeout = 2s;\n  .between_bytes_timeout = 1s;\n  .probe = {\n    .url = \"\/api\/v1\/kpi\/status\";\n    .timeout = 2ms;\n    .interval = 4s;\n    .window = 0;\n    .threshold = 0;\n    .dummy = true;\n  }\n}\n\nbackend FASTLY_API {\n  .connect_timeout = 15s;\n  .dynamic = true;\n  .port = \"443\";\n  .host = \"api.fastly.com\";\n  .first_byte_timeout = 15s;\n  .between_bytes_timeout = 1s;\n  .probe = {\n    .url = \"\/\";\n    .timeout = 2ms;\n    .interval = 4s;\n    .window = 0;\n    .threshold = 0;\n    .dummy = true;\n  }\n}\n\n\n\nsub px_prepare_bereq {\n  set bereq.http.Authorization = \"Bearer \" req.http.X-PX-config:auth-token;\n  # Not used on VCL but necessary to be sent to PX cloud\n  set bereq.http.X-PX-original-host = req.http.host;\n  set bereq.http.Host = \"sapi-{{px_app_id}}.perimeterx.net\"; # SET APPID HERE\n  set bereq.request = \"GET\";\n  set bereq.http.X-PX-ip = req.http.Fastly-Client-IP;\n  set bereq.http.X-PX-uri = req.protocol \":\/\/\" req.http.host req.url;\n  set bereq.http.X-PX-url = req.protocol \":\/\/\" req.http.host req.url;\n  set bereq.http.X-PX-first-party-mode = req.http.X-PX-config:first-party-mode;\n  call px_set_xff;\n\n  # Anonymization\n  unset bereq.http.cookie;\n}\n\nsub px_prepare_fastly_api_bereq {\n  declare local var.edge-dict-id STRING;\n\n  set var.edge-dict-id = \"px_\" req.http.x-px-feature \"_rdata_id\";\n  set req.backend = FASTLY_API;\n  set bereq.http.Fastly-Key = table.lookup(cs_data, \"eng_key\");\n  set bereq.url = \"\/service\/\" req.service_id \"\/dictionary\/\" table.lookup(cs_data, var.edge-dict-id) \"\/items\";\n  set bereq.http.Host = \"api.fastly.com\";\n}\n\n\nsub set_custom_risk_backend_overwrite {\n  # Example: Set different risk backend by Fastly region\n  #if (server.region !~ {\"US\"}) {\n  #  set req.backend = PX_RISK_API_LOW_TIMEOUT;\n  #}\n}\nsub px_custom_rate_limit_block_page {\n  # set obj.status = 429; # Changes status code from 403 to 401\n  # set obj.response = \"Too Many Requests\";\n  # set obj.http.Content-Type = \"text\/html\";\n  # return(deliver);\n}\n\nsub px_custom_captcha_handler {\n  # call px_custom_create_synthetic_captcha_page;\n  # set obj.status = 401; # Changes status code from 403 to 401\n  # set obj.response = \"Unauthorized\";\n  # set obj.http.Content-Type = \"text\/html\";\n  # return(deliver);\n}\n\nsub px_custom_block_handler {\n\n  # Example 1, continue using px_custom_create_synthetic_block_page but changing status code to 401\n\n  # call px_custom_create_synthetic_block_page;\n  # set obj.http.Content-Type = \"text\/html\";\n  # set obj.status = 401;\n  # set obj.response = \"Unauthorized\";\n  # return(deliver);\n\n  # Example 2, Format a json response\n\n  # synthetic {\"{\"status\": 403, \"message\": \"Access is blocked according to the site bots security policy\"} req.http.X-PX-block-reason {\"\", \"uuid\": \"\"} req.http.X-PX-uuid {\"\", \"additional\":{}}\"};\n  # set obj.http.Content-Type = \"application\/json\";\n  # set obj.status = 403;\n  # set obj.response = \"Unauthorized\";\n  # return(deliver);\n}\n\nsub px_custom_post_block_handler {\n  synthetic {\"\"};\n  set obj.status = 403;\n  set obj.response = \"Unauthorized\";\n  set obj.http.Content-Type = \"text\/html\";\n  return(deliver);\n}\n\nsub px_custom_default_rate_limit_block_page {\n  synthetic {\"<html> <head> <title>Too Many Requests<\/title> <\/head> <body> <h1>Too Many Requests<\/h1> <p>Reached maximum requests limitation, try again soon.<\/p> <\/body> <\/html>\"};\n  set obj.status = 429;\n  set obj.response = \"Too Many Requests\";\n  set obj.http.Content-Type = \"text\/html\";\n  return(deliver);\n}\n\nsub px_custom_create_synthetic_mobile_response {\n  if (req.http.X-PX-AUTHORIZATION) {\n    # Required for the mobile SDK, must include http\/https prefix\n    # Send the page in base64 format\n    declare local var.X-PX-page STRING;\n    set var.X-PX-page = digest.base64(req.http.X-PX-block-page);\n    synthetic {\" {\"action\": \"captcha\", \"uuid\": \"\"} req.http.X-PX-uuid {\"\", \"vid\": \"\"} if (req.http.X-PX-vid, req.http.X-PX-vid, \"\") {\"\", \"appId\": \"\"} req.http.X-PX-config:app-id {\"\",  \"page\": \"\"} var.X-PX-page {\"\", \"collectorUrl\": \"\"} req.http.X-PX-template:collector-host {\"\" } \"};\n\n    set obj.status = 403;\n    set obj.response = \"Forbidden\";\n    set obj.http.Content-Type = \"application\/json\";\n    return(deliver);\n  }\n}\n\nsub px_custom_create_synthetic_web_response {\n    synthetic req.http.X-PX-block-page;\n    set obj.status = 403;\n    set obj.response = \"Forbidden\";\n    set obj.http.Content-Type = \"text\/html\";\n    if (req.http.X-PX-config:enable-access-control-header == \"1\") {\n        call px_custom_access_control_header;\n    }\n    return(deliver);\n}\n\nsub px_custom_create_block_page {\n  declare local var.X-PX-logo-visibility STRING;\n  declare local var.X-PX-custom-logo STRING;\n  set var.X-PX-custom-logo = table.lookup(px_configs, \"CUSTOM_LOGO\", \"\");\n  if (var.X-PX-custom-logo != \"\"){\n    set var.X-PX-logo-visibility = \"visible\";\n  } else {\n    set var.X-PX-logo-visibility = \"hidden\";\n  }\n  set req.http.X-PX-block-page = {\"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"utf-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"> <title>Access to this page has been denied.<\/title> <link href=\"https:\/\/fonts.googleapis.com\/css?family=Open+Sans:300\" rel=\"stylesheet\"> <style> html, body { margin: 0; padding: 0; font-family: 'Open Sans', sans-serif; color: #000; } a { color: #c5c5c5; text-decoration: none; } .container { align-items: center; display: flex; flex: 1; justify-content: space-between; flex-direction: column; height: 100%; } .container > div { width: 100%; display: flex; justify-content: center; } .container > div > div { display: flex; width: 80%; } .customer-logo-wrapper { padding-top: 2rem; flex-grow: 0; background-color: #fff; visibility: \"} var.X-PX-logo-visibility {\"; } .customer-logo { border-bottom: 1px solid #000; } .customer-logo > img { padding-bottom: 1rem; max-height: 50px; max-width: 100%; } .page-title-wrapper { flex-grow: 2; } .page-title { flex-direction: column-reverse; } .content-wrapper { flex-grow: 5; } .content { flex-direction: column; } .page-footer-wrapper { align-items: center; flex-grow: 0.2; background-color: #000; color: #c5c5c5; font-size: 70%; } @media (min-width: 768px) { html, body { height: 100%; } } <\/style> <!-- Custom CSS --> \"} req.http.X-PX-css-ref-tag {\" <\/head> <body> <section class=\"container\"> <div class=\"customer-logo-wrapper\"> <div class=\"customer-logo\"> <img src=\"\"} var.X-PX-custom-logo {\"\" alt=\"Logo\"\/> <\/div> <\/div> <div class=\"page-title-wrapper\"> <div class=\"page-title\"> <h1>Please verify you are a human<\/h1> <\/div> <\/div> <div class=\"content-wrapper\"> <div class=\"content\"> <div id=\"px-captcha\"> <\/div> <p> Access to this page has been denied because we believe you are using automation tools to browse the website. <\/p> <p> This may happen as a result of the following: <\/p> <ul> <li> Javascript is disabled or blocked by an extension (ad blockers for example) <\/li> <li> Your browser does not support cookies <\/li> <\/ul> <p> Please make sure that Javascript and cookies are enabled on your browser and that you are not blocking them from loading. <\/p> <p> Reference ID: #\"} req.http.X-PX-uuid {\" <\/p> <\/div> <\/div> <div class=\"page-footer-wrapper\"> <div class=\"page-footer\"> <p> Powered by <a href=\"https:\/\/www.perimeterx.com\/whywasiblocked\">PerimeterX<\/a> , Inc. <\/p> <\/div> <\/div> <\/section> <!-- Px --> <script> window._pxAppId = '\"} req.http.X-PX-config:app-id {\"'; window._pxJsClientSrc = '\"} req.http.X-PX-template:js-client-src {\"'; window._pxFirstPartyEnabled = \"} if(req.http.X-PX-config:first-party-mode == \"1\", \"true\", \"false\") {\"; window._pxVid = '\"} if (req.http.X-PX-vid, req.http.X-PX-vid, \"\") {\"'; window._pxUuid = '\"} req.http.X-PX-uuid {\"'; window._pxHostUrl = '\"} req.http.X-PX-template:collector-host {\"'; <\/script> <script> var s = document.createElement('script'); s.src = '\"}req.http.X-PX-template:block-src{\"'; var p = document.getElementsByTagName('head')[0]; p.insertBefore(s, null); if (\"} if(req.http.X-PX-config:first-party-mode == \"1\", \"true\", \"false\") {\" ){s.onerror = function () {s = document.createElement('script'); var suffixIndex = '\"}req.http.X-PX-template:block-src{\"'.indexOf('\/captcha.js'); var temperedBlockScript = '\"}req.http.X-PX-template:block-src{\"'.substring(suffixIndex); s.src = '\/\/captcha.px-cdn.net\/\"}req.http.X-PX-config:app-id{\"' + temperedBlockScript; p.parentNode.insertBefore(s, p);};}<\/script> <!-- Custom Script --> \"} req.http.X-PX-js-ref-tag {\" <\/body> <\/html>\"};\n}\n\nsub px_custom_create_json_response {\n    if ((req.http.Accept ~ \"application\\\/json\" || req.http.Content-Type ~ \"application\\\/json\") && !req.http.X-PX-AUTHORIZATION && req.http.X-PX-action != \"r\") {\n        synthetic {\" {\"appId\": \"\"} req.http.X-PX-config:app-id {\"\", \"jsClientSrc\": \"\"} req.http.X-PX-template:js-client-src {\"\", \"firstPartyEnabled\": \"} if(req.http.X-PX-config:first-party-mode == \"1\", \"true\", \"false\") {\", \"vid\": \"\"} if (req.http.X-PX-vid, req.http.X-PX-vid, \"\") {\"\", \"uuid\": \"\"} req.http.X-PX-uuid {\"\", \"hostUrl\": \"\"} req.http.X-PX-template:collector-host {\"\", \"blockScript\": \"\"} req.http.X-PX-template:block-src {\"\" } \"};\n        set obj.status = 403;\n        set obj.response = \"Forbidden\";\n        set obj.http.Content-Type = \"application\/json\";\n        return(deliver);\n    }\n}\n\n\nsub px_custom_check_excluded_extension {\n  if ((req.request == \"GET\" || req.request == \"HEAD\") && req.url.ext ~ \"(?i)(css|bmp|tif|ttf|docx|woff2|js|pict|tiff|eot|xlsx|csv|eps|woff|xls|jpeg|jpg|doc|ejs|otf|pptx|gif|pdf|swf|svg|ps|ico|pls|midi|svgz|class|png|ppt|mid|webp|jar)$\") {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n       log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" check_excluded_extension - Skipping PX logic due to GET method with ext - \" req.url.ext;\n    }\n    set req.http.X-PX-excluded-extension = \"1\";\n  }\n}\n\n\nsub px_custom_check_block_post_url {\n  if (req.url.path ~ {\"^block_large_post_request1\/|^\/block_large_post_request2$\"}) {\n    set req.http.X-PX-block-post-request = \"1\";\n  }\n}\n\n\nsub px_custom_check_block_by_size {\n  if (std.atoi(req.http.content-length) >= 50000) {\n    set req.http.X-PX-block-post-request = \"1\";\n  }\n}\n\n\nsub px_custom_check_enabled_route {\n  if (req.http.X-PX-config:enable-whitelisted-routes == \"1\") {\n    if (req.url.path ~ {\"^\/prefix|^\/exact\/match$\"}) {\n      # returning without setting X-PX-enabled-route header to 1\n      return;\n    }\n  }\n\n  if (req.http.X-PX-config:enable-specific-routes == \"0\") {\n    set req.http.X-PX-enabled-route = \"1\";\n    return;\n  }\n\n  if (req.url.path ~ {\"^\/prefix|^\/exact\/match$\"}) {\n     set req.http.X-PX-enabled-route = \"1\";\n  }\n}\n\n\nsub px_custom_check_sensitive_route {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" checking for sensitive route. path: \" req.url.path;\n  }\n  if (req.http.X-PX-config:enable-sensitive-routes == \"1\") {\n    if (req.url.path ~ {\"<sensitive_routes>\"}) {\n      set req.http.X-PX-sensitive-route = \"1\";\n    }\n  }\n}\n\n\nsub px_custom_check_block_specific_route {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" checking for block specific route. path: \" req.url.path;\n  }\n  if (req.http.X-PX-config:enable-block-specific-routes == \"1\") {\n    if (req.url.path ~ {\"^\/prefix|^\/exact\/match$\"}) {\n      if (req.http.X-PX-config:enable-debug == \"1\") {\n        log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" Enabled blocking due to specific block routes. path: \" req.url.path;\n      }\n      set req.http.X-PX-config:module-mode = \"2\";\n    }\n  }\n}\n\nsub px_override_configs {\n    # EXAMPLE\n\n    # if (client.geo.country_code == \"CH\") {\n    #   set req.http.X-PX-config:captcha-provider = \"funCaptcha\";\n    #}\n}\n\nsub px_custom_redirect {\n    # Example\n    # Enter here only if we already know we are going to block\n    # if (req.http.X-PX-fetch-block-page-from-backend == \"1\") {\n    #   set req.url = \"\/block?uuid=\" req.http.X-PX-UUID \"&vid=\" req.http.X-PX-vid;\n    #   set req.http.Host = \"example.com\";\n    #   set req.request = \"GET\";\n    #   return(pass);\n    # }\n}\n\nsub px_custom_extract_cookie_from_header {\n    # Example\n\n    # set req.http.X-PX-original-cookie = req.http.X-User-Defined--PXCookie-Header;\n}\n\nsub px_custom_pre_clean {\n  # Example\n\n  # set req.http.X-PX-KEEP-s2s-call-reason = req.http.X-PX-ADD-s2s-call-reason; \n}\n\nsub px_custom_check_first_party_redirect {\n  if (req.url.dirname == \"\/{{px_app_id_no_px}}\" && req.url.basename == \"init.js\") {  # Replace {{px_app_id_no_px}} with your AppId without PX prefix\n    set req.http.X-PX-client-redirect = \"1\"; \n  } \n\n  if (req.url.dirname ~ {\"^\/{{px_app_id_no_px}}\/xhr\"}) {  # Replace {{px_app_id_no_px}} with your AppId without PX prefix\n    set req.http.X-PX-xhr-redirect = \"1\"; \n  }\n\n  if (req.url.dirname ~ {\"^\/{{px_app_id_no_px}}\/captcha\"}) { # Replace {{px_app_id_no_px}} with your AppId without PX prefix\n    set req.http.X-PX-captcha-redirect = \"1\";\n  }\n}\n\nsub px_custom_activity_headers {\n  # Replace empty string with headers that should be added to enforcer activities (page_requested, block) using the format |~|h-<header name>:<header name>\n  # Example: set req.http.X-PX-additional-activity-headers = \"|~|h-x-some-header:\" req.http.x-some-header \"|~|h-x-other-header:\" req.http.x-other-header ;\n  # set req.http.X-PX-additional-activity-headers = \"\";\n} \n\nsub px_custom_enrich_risk_custom_params {\n  # Set custom params on headers in the following syntax: set req.http.X-PX-custom-param1 = <value>;\n}\n\nsub px_custom_data_enrichment_handler {\n}\n\nsub px_custom_access_control_header {\n    # Override header wildcard value to any specific value\n    set obj.http.Access-Control-Allow-Origin = \"*\";\n}\n\nsub px_custom_check_bypass_monitor {\n}\n\nsub px_custom_first_party_access_control_allow_origins_whitelist {\n}\n\nsub px_custom_csp_enable_routes {\n}\n\nsub px_custom_is_login_request {\n  unset req.http.login-set;\n  if(req.url.path ~ \"^\/login\") {\n    if(table.lookup(px_login, \"login_creds::path_0\") == \"^\/login\") {\n      set req.http.login-set = \"_0\";\n    }\n  }\n  #else if(req.url.path ~ \"^\/login2\") {\n  #  if(table.lookup(px_login, \"login_creds::path_1\") == \"^\/login2\") {\n  #    req.http.login-set = \"_1\";\n  #  }\n  #}\n}\n\n\n\n\nsub px_recv {\n  if (req.restarts == 0) {\n      if (fastly.ff.visits_this_service == 0) {\n        set req.http.Fastly-Client-IP = client.ip;\n      }\n      call px_init;\n      call px_get_configs;\n      call px_get_enabled_module_flag;\n      call px_redirect_px_request;\n  }\n\n  # end here if PX Module is disabled\n  if (req.http.X-PX-config:enable-module != \"1\") {\n      return;\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_recv\";\n  }\n\n  if (req.restarts == 0) {\n    call px_handle_first_request;\n  } else {\n    call px_handle_request_after_restart;\n  }\n}\n\n\nsub px_recv_clustering_fixup {\n  if (req.http.X-PX-internal-flow == \"1\") {\n    # If internal-flow is 1, it means restart > 0 and we need to manually enable clustering\n    set req.http.Fastly-Force-Shield = \"1\";\n  }\n}\n\n\n\nsub px_fetch {\n  # do nothing if PX Module is disabled\n  if (req.http.X-PX-config:enable-module != \"1\") {\n    return;\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_fetch\";\n  }\n\n  if (req.http.X-PX-validating-s2s == \"1\") {\n    call px_handle_s2s_response;\n  }\n}\n\nsub px_deliver {\n  # do nothing if PX Module is disabled\n  if (req.http.X-PX-config:enable-module != \"1\") {\n    return;\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_deliver\";\n  }\n\n  if(req.http.should-send-page-requested == \"1\") {\n    call px_send_page_requested_activity;\n  }\n\n  if (req.http.X-PX-pxhd && !(req.http.X-PX-pxhd == \"(null)\")) {\n      declare local var.pxhd_secure STRING;\n      set var.pxhd_secure = if (table.lookup(px_configs, \"PXHD_SECURE\", \"0\") == \"0\", \"\", \"; Secure\");\n      add resp.http.Set-Cookie = \"_pxhd=\" req.http.X-PX-pxhd var.pxhd_secure \"; Expires=\" now + 1y \"; path=\/; \";\n      unset req.http.X-PX-pxhd;\n  }\n\n  if (req.http.X-PX-FIRST-PARTY != \"1\") {\n    if (req.http.X-PX-clean-risk-cookie == \"1\") {\n      add resp.http.Set-Cookie = \"_px2=; Expires=Thu, 01 Jan 1970 00:00:00 GMT; path=\/; \";\n    }\n\n    #csp\n    if (table.lookup(px_configs, \"CSP_ENABLE\", \"0\") == \"1\") {\n      #csp enabled\n      call px_handle_csp;\n    }\n  } else { \n    # In the case we serve a first party route:\n    call px_custom_first_party_access_control_allow_origins_whitelist;\n    unset req.http.X-PX-FIRST-PARTY;\n    return(deliver);\n  }\n}\n\nsub px_handle_csp {\n  if(req.request != \"GET\") {\n    #csp is relevant for GET requests only\n    return;\n  }\n\n  #make sure health_check is not expired\n  if(!time.is_after(std.integer2time(std.atoi(table.lookup(px_csp_rdata, \"csp::health_check\"))), now)) {\n    return;\n  }\n\n  call px_custom_csp_enable_routes;\n  if (req.http.csp_enabled_route != \"1\") {\n    #csp is not enabled on this route\n    return;\n  }\n\n  call px_get_csp_data;\n\n  declare local var.query_params STRING;\n  if(req.http.csp || req.http.cspro || req.http.cspro_p2) {\n    #fetch __pxvid cookie (code-defender cookie)\n    set var.query_params = if(req.http.cookie ~ \"__pxvid=([^;]*)\", \"&v=\" re.group.1, \"\");\n    set var.query_params = var.query_params \"&p=\" uuid.version4();\n  }\n\n  if(req.http.csp) {  \n    #set csp header to the response\n    set resp.http.Content-Security-Policy = req.http.csp var.query_params;\n  }\n\n  if(req.http.cspro || req.http.cspro_p2) {\n    declare local var.policy_report_exposure INTEGER;\n    declare local var.policy_report_exposure_p2 INTEGER;\n\n    set var.policy_report_exposure = std.atoi(req.http.cspro_exposure);\n    set var.policy_report_exposure_p2 = std.atoi(req.http.cspro_p2_exposure);\n\n    if(req.http.cspro && var.policy_report_exposure >= 0 && var.policy_report_exposure <= 100 && randombool(var.policy_report_exposure, 100)) {\n      #set cspro header to the response\n      set resp.http.Content-Security-Policy-Report-Only = req.http.cspro var.query_params;\n    } \n    else if (req.http.cspro_p2 && var.policy_report_exposure_p2 >= 0 && var.policy_report_exposure_p2 <= 100 && randombool(var.policy_report_exposure_p2, 100)){\n        #set cspro2 header to the response\n        set resp.http.Content-Security-Policy-Report-Only = req.http.cspro_p2 var.query_params;\n      }\n    }\n  \n  #clean headers\n  unset req.http.csp;\n  unset req.http.cspro;\n  unset req.http.cspro_p2;\n  unset req.http.cspro_exposure;\n  unset req.http.cspro_p2_exposure;\n  unset req.http.csp_enabled_route;\n}\n\nsub px_get_csp_data {\n  #csp header - max of 3 partitions\n  if(table.lookup(px_csp_rdata, \"csp::csp\", \"\") ~ \"^(.*)::([1-3]{1})$\") {\n    declare local var.policy STRING;\n    declare local var.policy_num_of_partitions INTEGER;\n\n    #extract csp header value\n    set var.policy = re.group.1;\n    \n    #num of partitions for csp header\n    set var.policy_num_of_partitions = std.atoi(re.group.2);\n\n    if(var.policy_num_of_partitions > 1) {\n      #concat partition 1\n      set var.policy = var.policy table.lookup(px_csp_rdata, \"csp::csp_1\", \"\");\n    }\n\n    if(var.policy_num_of_partitions > 2) {\n      #concat partition 2\n      set var.policy = var.policy table.lookup(px_csp_rdata, \"csp::csp_2\", \"\");\n    }\n\n    #set csp header to the response\n    set req.http.csp = var.policy;\n  } \n\n  #cspro header - max of 3 partitions\n  if(table.lookup(px_csp_rdata, \"csp::cspro\", \"\") ~ \"^(.*)::([1-3]{1})$\") {\n    declare local var.policy_report STRING;\n    declare local var.policy_report_num_of_partitions INTEGER;\n    declare local var.policy_report_exposure INTEGER;\n\n    #extract cspro header value\n    set var.policy_report = re.group.1;\n    \n    #num of partitions for cspro header\n    set var.policy_report_num_of_partitions = std.atoi(re.group.2);\n\n    if(var.policy_report_num_of_partitions > 1) {\n      #concat partition 1\n      set var.policy_report = var.policy_report table.lookup(px_csp_rdata, \"csp::cspro_1\", \"\");\n    }\n\n    if(var.policy_report_num_of_partitions > 2) {\n      #concat partition 2\n      set var.policy_report = var.policy_report table.lookup(px_csp_rdata, \"csp::cspro_2\", \"\");\n    }\n\n    set req.http.cspro = var.policy_report;\n\n    #extract exposure\n    if(table.lookup(px_csp_rdata, \"csp::cspro_exposure\") ~ \"^(\\d{1,3})::1$\") {\n      set req.http.cspro_exposure = re.group.1;\n    }\n  }\n\n  #cspro_p2 header - max of 3 partitions\n  if(table.lookup(px_csp_rdata, \"csp::cspro_p2\", \"\") ~ \"^(.*)::([1-3]{1})$\") {\n    declare local var.policy_report_p2 STRING;\n    declare local var.policy_report_num_of_partitions_p2 INTEGER;\n    declare local var.policy_report_exposure_p2 INTEGER;\n\n    #extract cspro_p2 header value\n    set var.policy_report_p2 = re.group.1;\n    \n    #num of partitions for cspro header\n    set var.policy_report_num_of_partitions_p2 = std.atoi(re.group.2);\n\n    if(var.policy_report_num_of_partitions_p2 > 1) {\n      #concat partition 1\n      set var.policy_report_p2 = var.policy_report_p2 table.lookup(px_csp_rdata, \"csp::cspro_p2_1\", \"\");\n    }\n\n    if(var.policy_report_num_of_partitions_p2 > 2) {\n      #concat partition 2\n      set var.policy_report_p2 = var.policy_report_p2 table.lookup(px_csp_rdata, \"csp::cspro_p2_2\", \"\");\n    }\n\n    set req.http.cspro_p2 = var.policy_report_p2;\n\n    #extract exposure 2\n    if(table.lookup(px_csp_rdata, \"csp::cspro_p2_exposure\") ~ \"^(\\d{1,3})::1$\") {\n      set req.http.cspro_p2_exposure = re.group.1;\n    }\n  } \n}\n\nsub px_first_party_error_response_handler {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_first_party_error_response_handler reason:\" obj.response;\n    }\n\n    # response handling\n    set obj.status = 200;\n    set obj.response = \"OK\";\n\n    #render\n    synthetic {\"\"};\n}\n\n\nsub px_error {\n  # do nothing if PX Module is disabled\n  if (req.http.X-PX-config:enable-module != \"1\") {\n    return;\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_error_response\";\n  }\n  # In case of server timeout - pass traffic\n\n  # First Party client disabled\n  if (obj.status == 991) {\n    set obj.http.Content-Type = \"application\/javascript\";\n    call px_first_party_error_response_handler;\n    return(deliver);\n  }\n\n  # First Party XHR disabled\n  if (obj.status == 992) {\n    set obj.http.Content-Type = \"application\/json\";\n    call px_first_party_error_response_handler;\n    synthetic {\"{}\"};\n\n    # Case we shoudl render a pixel\n    if (req.request == \"GET\" && req.url.ext == \"gif\" ) {\n      set obj.http.Content-Type = \"image\/gif\";\n      synthetic digest.base64_decode(\"R0lGODlhAQABAPAAAAAAAAAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw==\");\n    }\n\n    return(deliver);\n  }\n\n  if (req.http.X-PX-validating-s2s == \"1\") {\n    if (req.http.X-PX-config:enable-error == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:error-syslog-name \" :: [PX-ERROR] Risk api error - Status:\" obj.status \", Response:\" obj.response \" ,timing:\" time.elapsed.msec \" ms\";\n    }\n\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_error_response - Restarting due to server request error - req.http.X-PX-validating-s2s:\" req.http.X-PX-validating-s2s \" obj.status:\" obj.status \" obj.response:\" obj.response;\n    }\n    if (req.http.X-PX-validating-s2s == \"1\") {\n      set req.http.X-PX-pass-reason = \"s2s_timeout\";\n      set req.http.X-PX-error-response = obj.response;\n      set req.http.X-PX-error-status = obj.status;\n    }\n    set req.http.X-PX-validated-request = \"1\";\n    set req.http.X-PX-internal-flow = \"1\";\n    restart;\n  }\n\n  if (obj.status == 995 || obj.status == 996) {\n    if (req.http.X-PX-config:enable-debug == \"1\" && req.http.x-px-debug-timing && req.http.x-px-debug-timing != \"(null)\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" overall_timing(block): \" req.http.x-px-debug-timing;\n    }\n\n    if (req.http.X-PX-config:add-block-result-header == \"1\") {\n      # Header that is not getting cleaned before reaching the client's server for debugging purposes\n      set req.http.X-PX-block-result = \"1\";\n    }\n\n    set req.http.X-PX-block-reason = obj.response;\n    call px_send_block_activity;\n    call px_build_props;\n    if (obj.status == 995) {\n      if (req.http.X-PX-action == \"r\"){\n        # rate limiting\n        call px_custom_rate_limit_block_page;\n        call px_custom_default_rate_limit_block_page;\n      }\n\n      if (req.http.X-PX-config:module-mode == \"2\") {\n        # Check if Challenge page\n        if (req.http.X-PX-action == \"j\") {\n          set req.http.X-PX-block-result = \"0\";\n          synthetic digest.base64_decode(req.http.X-PX-action-data);\n          return (deliver);\n        }\n\n        # In case custom block\/captcha handler are implemented\n        if (req.http.X-PX-config:enable-captcha == \"1\" && (!req.http.X-PX-action || req.http.X-PX-action == \"(null)\" || req.http.X-PX-action == \"c\")) {\n          call px_custom_captcha_handler;\n        } else {\n          call px_custom_block_handler;\n        }\n        call px_custom_create_json_response;\n        call px_custom_create_block_page;\n        call px_custom_create_synthetic_mobile_response;\n        call px_custom_create_synthetic_web_response;\n      }\n    }\n\n    # Have to check this condition again for not rendering block page on module mode \"3\"\n    if (req.http.X-PX-config:module-mode == \"2\") {\n      if (obj.status == 996) {\n        call px_custom_post_block_handler;\n      }\n\n      # Default beaviour\n      set obj.status = 403;\n      set obj.response = \"Unauthorized\";\n      set obj.http.Content-Type = \"text\/html\";\n      return(deliver);\n    }\n  }\n}\n\n\nsub px_pass {\n  call px_clean_module_headers;\n\n  if (req.http.X-PX-FIRST-PARTY == \"1\" || req.http.X-PX-config:enable-module != \"1\") {\n    call px_clean_before_customer_origin;\n  }\n  \n  # end here if PX Module is disabled\n  if (req.http.X-PX-config:enable-module != \"1\") {\n    return;\n  }\n\n  if (req.http.X-PX-PUSHDATA == req.http.X-PX-Request-ID) {\n    call px_prepare_fastly_api_bereq;\n    call px_clean_before_customer_origin;\n  } else if (req.http.X-PX-validating-s2s == \"1\") {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" sub px_pass - S2S FLOW\";\n    }\n    call px_prepare_s2s_bereq;\n  } else {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" sub px_pass - Not PX Flow\";\n    }\n    call px_clean_before_customer_origin;\n    \n    declare local var.X-PX-pass-reason STRING; \n    set var.X-PX-pass-reason = req.http.X-PX-pass-reason;\n\n    if (var.X-PX-pass-reason == \"s2s_error\" || var.X-PX-pass-reason == \"s2s_timeout\") {\n      set bereq.http.X-PX-data-enrichment-err = var.X-PX-pass-reason;\n    }\n  }\n}\n\n\nsub px_miss {\n  call px_clean_module_headers;\n  call px_clean_before_customer_origin;\n\n  # end here if PX Module is disabled\n  if (req.http.X-PX-config:enable-module != \"1\") {\n      return;\n  }\n  \n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" sub px_miss - Cleaning headers before server request\";\n  }\n  declare local var.X-PX-pass-reason STRING; \n  set var.X-PX-pass-reason = req.http.X-PX-pass-reason;\n\n  if (var.X-PX-pass-reason == \"s2s_error\" || var.X-PX-pass-reason == \"s2s_timeout\") {\n    set bereq.http.X-PX-data-enrichment-err = var.X-PX-pass-reason;\n  }\n}\n\n\nsub px_check_block_post_request {\n  if (req.http.X-PX-config:block-all-large-post-requests == \"1\") {\n    set req.http.X-PX-block-post-request = \"1\";\n    return;\n  }\n\n  if (req.http.X-PX-config:block-large-post-specific-routes == \"1\") {\n    call px_custom_check_block_post_url;\n  }\n\n  if (req.http.X-PX-config:block-large-post-by-size == \"1\") {\n    call px_custom_check_block_by_size;\n  }\n}\n\n\nsub px_handle_exceeded_post_requests {\n  unset req.http.X-PX-block-post-request;\n  if (req.http.X-PX-config:module-mode == \"2\") {\n    call px_check_block_post_request;\n    if (req.http.X-PX-block-post-request == \"1\") {\n      error 996 \"request_exceeded_size\";\n    }\n  }\n  set req.http.X-PX-config:module-mode = \"0\";\n  set req.http.X-PX-request-exceeded-size-limit = \"1\";\n}\n\n\nsub check_excluded_request {\n  unset req.http.X-PX-excluded-request;\n  unset req.http.X-PX-excluded-extension;\n  unset req.http.X-PX-enabled-route;\n\n  set req.http.X-PX-excluded-request = \"1\";\n  if (req.request == \"FASTLYPURGE\") {\n    return;\n  }\n  call px_custom_check_enabled_route;\n  if (req.http.X-PX-enabled-route == \"1\") {\n    call px_custom_check_excluded_extension;\n    if (req.http.X-PX-excluded-extension != \"1\") {\n       set req.http.X-PX-excluded-request = \"0\";\n    }\n  }\n\n  unset req.http.X-PX-excluded-extension;\n  unset req.http.X-PX-excluded-route;\n}\n\n\nsub px_redirect_px_request {\n  declare local var.captcha_url STRING;\n  unset req.http.X-PX-FIRST-PARTY;\n  unset req.http.X-PX-client-redirect;\n  unset req.http.X-PX-xhr-redirect;\n  set req.http.X-PX-config:app-id = table.lookup(px_configs, \"APP_ID\", \"\");\n  set req.http.X-PX-config:first-party-mode = table.lookup(px_configs, \"FIRST_PARTY_MODE\", \"0\");\n  set req.http.X-PX-config:xhr-enabled = table.lookup(px_configs, \"REDIRECT_XHR\", \"0\");\n\n  call px_custom_check_first_party_redirect;\n  # config should already be loaded here\n  if ((req.url.dirname == \"\/px\/client\" && req.url.basename == \"main.min.js\") || req.http.X-PX-client-redirect == \"1\") {\n    if (req.http.X-PX-config:first-party-mode == \"0\") {\n      error 991 \"first_party_disabled\";\n    }\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" proxying client\";\n    }\n    \n    #-- PX 1 backend client - Begin\n    set req.http.Host = \"sapi-\" req.http.X-PX-config:app-id \".perimeterx.net\";\n    set req.url = \"\/bd\/client\/\" req.http.X-PX-config:app-id \"\/main.min.js\";\n    set req.backend = PX_API;\n    #-- PX 1 backend client - End\n\n    set req.http.X-PX-FIRST-PARTY = \"1\";\n    unset req.http.X-PX-config:app-id;\n    unset req.http.Authorization;\n    # Return lookup so PX sensor will be cached\n    return(lookup);\n  }\n\n  # redirect xhr requests\n  if ((req.url.dirname ~ {\"^\/px\/xhr\"}) || req.http.X-PX-xhr-redirect == \"1\") {\n    if (req.http.X-PX-config:first-party-mode == \"0\" || req.http.X-PX-config:xhr-enabled == \"0\") {\n      error 992 \"first_party_xhr_disabled\";\n    }\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" proxying xhr\";\n    }\n    \n    #-- PX 1 backend xhr - Begin\n    set req.http.Host = \"sapi-\" req.http.X-PX-config:app-id \".perimeterx.net\";\n    set req.backend = PX_API;\n    #-- PX 1 backend xhr - End\n    \n    set req.url = regsub(req.url, \"^\/\\w+\/xhr\",\"\");\n\n    set req.http.x-px-enforcer-true-ip = req.http.Fastly-Client-IP;\n    set req.http.X-PX-FIRST-PARTY = \"1\";\n    # remove cookies except vid if exists\n    if (req.http.Cookie:pxvid) {\n      set req.http.X-PX-vid = req.http.Cookie:pxvid;\n    }\n\n    if (req.http.Cookie:_pxvid) {\n      set req.http.X-PX-vid = req.http.Cookie:_pxvid;\n    }\n    unset req.http.cookie;\n    if (req.http.X-PX-vid) {\n      set req.http.cookie = \"pxvid=\" req.http.X-PX-vid;\n    }\n    unset req.http.X-PX-vid;\n    unset req.http.X-PX-config:app-id;\n    unset req.http.Authorization;\n    # Return pass so PX xhr response won't be cached\n    return(pass);\n  }\n\n  if (req.http.X-PX-captcha-redirect == \"1\") {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" proxying captcha\";\n    }\n    \n    #-- PX 1 backend captcha - Begin\n    set var.captcha_url = {\"\/bd\/captcha\/\"} req.http.X-PX-config:app-id;\n    set req.http.Host = \"sapi-\" req.http.X-PX-config:app-id \".perimeterx.net\";\n    set req.backend = PX_API;\n    #-- PX 1 backend captcha - End\n\n    set req.url = regsub(req.url, \"^\/\\w+\/captcha\", var.captcha_url);\n    set req.http.X-PX-FIRST-PARTY = \"1\";\n    unset req.http.X-PX-config:app-id;\n    unset req.http.Authorization;\n    # Return lookup so captcha script will be cached\n    return(lookup);\n  }\n\n  # push data command\n  if (req.http.X-PX-PUSHDATA && req.http.X-PX-config:remote-data == \"1\" && req.http.X-PX-config:enable-module == \"1\") {\n    declare local var.hmac_pass_string STRING;\n    declare local var.command_after_base64_decode STRING;\n    declare local var.actual_pass_hash STRING;\n    declare local var.cookie_validity STRING;\n    declare local var.cookie_validity_sec STRING;\n  \n    set var.command_after_base64_decode = digest.base64_decode(urldecode(req.http.X-PX-PUSHDATA));\n    set var.cookie_validity = if (var.command_after_base64_decode ~ {\"([0-9]*):([^\"]*)\"}, re.group.1, \"\");\n    set var.cookie_validity_sec = if (var.cookie_validity ~ {\"([0-9]{10})\"}, re.group.1, \"\");\n    set var.hmac_pass_string = if (var.command_after_base64_decode ~ {\"([0-9]*):([^\"]*)\"}, re.group.2, \"\");\n    set var.actual_pass_hash = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.cookie_validity), \"^0x\", \"\");\n  \n    if (var.actual_pass_hash == var.hmac_pass_string && time.is_after(std.integer2time(std.atoi(var.cookie_validity_sec)), now)) {\n      #command is valid and secured\n      set req.http.X-PX-PUSHDATA = req.http.X-PX-Request-ID;\n      return(pass);\n    } \n    else {\n      # command is not valid. do nothing. let the request go through the regular pipline\n      unset req.http.X-PX-PUSHDATA;\n    }\n  }\n\n  call px_custom_redirect;\n}\n\n\nsub px_init {\n  if (req.restarts == 0) {\n    set req.http.X-PX-Request-ID = digest.hash_sha1(now randomstr(64) req.http.host req.url req.http.Fastly-Client-IP server.identity);\n  }  \n}\n\nsub px_get_enabled_module_flag {\n  # Activate module only on edge nodes\n  if (fastly.ff.visits_this_service != 0) {\n   #in case we're not on edge node, disable module\n   set req.http.X-PX-config:enable-module = \"0\";\n   return;\n  }\n\n  set req.http.X-PX-config:enable-module = table.lookup(px_configs, \"ENABLE_MODULE\", \"1\");\n  set req.http.X-PX-config:enable-specific-routes = table.lookup(px_configs, \"ENABLE_SPECIFIC_ROUTES\", \"0\");\n  set req.http.X-PX-config:enable-whitelisted-routes = table.lookup(px_configs, \"ENABLE_WHITELISTED_ROUTES\", \"0\");\n  set req.http.X-PX-config:enable-debug = table.lookup(px_configs, \"ENABLE_DEBUG\", \"0\");\n  set req.http.X-PX-config:debug-syslog-name = table.lookup(px_configs, \"DEBUG_SYSLOG_NAME\", \"PX-Debug\");\n\n  if (req.http.X-PX-config:enable-module == \"1\") {\n    call check_excluded_request;\n    if (req.http.X-PX-excluded-request == \"1\") {\n      set req.http.X-PX-config:enable-module = \"0\";\n    }\n  }\n\n  # Custom override rules for customer use\n  call px_override_configs;  \n}\n\nsub px_get_configs {\n  set req.http.X-PX-config = \"\"\n  \"pre-clean-enabled=\" table.lookup(px_configs, \"ENABLE_PRE_CLEAN\", \"0\") \",\"\n  \"enable-debug=\" table.lookup(px_configs, \"ENABLE_DEBUG\", \"0\") \",\"\n  \"enable-error=\" table.lookup(px_configs, \"ENABLE_ERROR\", \"0\") \",\"\n  \"enable-captcha=\" table.lookup(px_configs, \"ENABLE_CAPTCHA\", \"1\") \",\"\n  \"module-mode=\" table.lookup(px_configs, \"MODULE_MODE\", \"0\") \",\"\n  \"first-party-mode=\" table.lookup(px_configs, \"FIRST_PARTY_MODE\", \"1\") \",\"\n  \"xhr-enabled=\" table.lookup(px_configs, \"REDIRECT_XHR\", \"1\") \",\"\n  \"app-id=\" table.lookup(px_configs, \"APP_ID\", \"\") \",\"\n  \"auth-token=\" table.lookup(px_configs, \"AUTH_TOKEN\", \"\") \",\"\n  \"cookie-secret=\" table.lookup(px_configs, \"COOKIE_SECRET_KEY\", \"\") \",\"\n  \"send-page-activities=\" table.lookup(px_configs, \"SEND_PAGE_ACTIVITIES\", \"1\") \",\"\n  \"add-block-result-header=\" table.lookup(px_configs, \"ADD_BLOCK_RESULT_HEADER\", \"1\") \",\"\n  \"block-all-large-post-requests=\" table.lookup(px_configs, \"BLOCK_ALL_SIZE_EXCEEDED_POST_REQUESTS\", \"0\") \",\"\n  \"block-large-post-specific-routes=\" table.lookup(px_configs, \"BLOCK_SIZE_EXCEEDED_POST_REQUESTS_SPECIFIC_ROUTES\", \"0\") \",\"\n  \"block-large-post-by-size=\" table.lookup(px_configs, \"BLOCK_SIZE_EXCEEDED_POST_REQUESTS_BY_SIZE\", \"0\") \",\"\n  \"block-request-by-large-headers-size=\" table.lookup(px_configs, \"BLOCK_SIZE_EXCEEDED_15K_HEADERS_SIZE\", \"1\") \",\"\n  \"enable-sensitive-routes=\" table.lookup(px_configs, \"ENABLE_SENSITIVE_ROUTES\", \"0\") \",\"\n  \"enable-cookie-from-header=\" table.lookup(px_configs, \"ENABLE_COOKIE_FROM_HEADER\", \"0\") \",\"\n  \"enable-block-specific-routes=\" table.lookup(px_configs, \"ENABLE_BLOCK_SPECIFIC_ROUTES\", \"0\") \",\"\n  \"enable-access-control-header=\" table.lookup(px_configs, \"ENABLE_ACCESS_CONTROL_HEADER\", \"0\") \",\"\n  \"csp-enable=\" table.lookup(px_configs, \"CSP_ENABLE\", \"0\") \",\"\n  \"remote-data=\" table.lookup(px_configs, \"REMOTE_DATA\", \"0\") \",\"\n  \"remote-block=\" table.lookup(px_configs, \"REMOTE_BLOCK_ENABLE\", \"0\") \",\"\n  \"remote-block-max-size=\" table.lookup(px_configs, \"REMOTE_BLOCK_MAX_SIZE\", \"0\") \",\"\n  \"enable-login-creds-extraction=\" table.lookup(px_configs, \"PX_ENABLE_LOGIN_CREDS_EXTRACTION\", \"0\") \",\"\n  \"http-version=\" if (fastly_info.is_h2, \"2\", regsub(req.proto, \"^[^\\\/]*\\\/\", \"\")) \",\"\n  \"syslog-name=\" table.lookup(px_configs, \"PX_SYSLOG_NAME\", \"PX-Syslog\") \",\"\n  \"ADD-module-version=\" {\"\"Fastly 7.1.0\"\"} \",\"\n  \"debug-syslog-name=\" table.lookup(px_configs, \"DEBUG_SYSLOG_NAME\", \"PX-Debug\") \",\"\n  \"error-syslog-name=\" \"PX-Error\"\n  \"\";\n  set req.http.X-PX-css-ref = table.lookup(px_configs, \"CSS_REF\", \"\");\n  set req.http.X-PX-js-ref = table.lookup(px_configs, \"JS_REF\", \"\");\n  # if we are in [async] monitor mode and bypass monitor is configured, then change module-mode to blocking (2)\n  call px_custom_check_bypass_monitor;\n  if ((req.http.X-PX-config:module-mode == \"0\" || req.http.X-PX-config:module-mode == \"1\") && req.http.X-PX-config:enable-bypass-monitor-header == \"1\") {\n    set req.http.X-PX-config:module-mode = \"2\";\n  }\n  unset req.http.X-PX-config:enable-bypass-monitor-header;\n  #check for block specific routes and change module_mode accordingly\n  call px_custom_check_block_specific_route;\n  # TLS info\n  set req.http.X-PX-ADD-tls = \"\"\n  \"protocol=\" tls.client.protocol \",\"\n  \"server=\" tls.client.servername \",\"\n  \"cipher=\" tls.client.cipher \",\"\n  \"cipher-sha=\" tls.client.ciphers_sha \",\"\n  \"extension-sha=\" tls.client.tlsexts_sha\n  \"\";\n  # fastly server info\n  set req.http.X-PX-ADD-fst-server = \"\"\n  \"identity=\" server.identity \",\"\n  \"region=\" server.region \",\"\n  \"datacenter=\" server.datacenter\n  \"\";\n  if (req.http.X-PX-config:add-block-result-header == \"1\") {\n    # Header that is not getting cleaned before reaching the client's server for debugging purposes\n    set req.http.X-PX-block-result = \"0\";\n  }\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    set req.http.x-px-debug-timing = \"px_get_configs: \" time.elapsed.msec;\n  }\n}\n\nsub px_set_temp_xff {\n  if (req.http.X-Forwarded-For) {\n    set req.http.X-PX-Temp-XFF = req.http.X-Forwarded-For \", \" client.ip;\n  } else {\n    set req.http.X-PX-Temp-XFF = client.ip;\n  }\n}\n\nsub px_set_xff {\n  if (req.http.X-PX-Temp-XFF) {\n     if (req.http.X-PX-Temp-XFF == \"\") {\n       unset bereq.http.X-Forwarded-For;\n     } else {\n       set bereq.http.X-Forwarded-For = req.http.X-PX-Temp-XFF;\n     }\n  }\n}\n\n\nsub px_handle_unvalidated_s2s_after_restart {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_handle_unvalidated_s2s_after_restart\";\n  }\n\n  # Need to block a request we must be in mode 2 or semi block which is \"3\"\n  # that only allows to block if block action is \"r\"\n  if (req.http.X-PX-config:module-mode == \"2\" || (req.http.X-PX-config:module-mode == \"3\" && req.http.X-PX-action == \"r\")) {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_handle_request_after_restart -  restarts > 0. Block needed. req.http.X-PX-validating-s2s - \" req.http.X-PX-validating-s2s;\n    }\n\n    if (req.http.X-PX-action == \"r\") {\n      set req.http.X-PX-block-reason = \"exceeded_rate_limit\";\n    }\n    error 995 req.http.X-PX-block-reason;\n\n  } else if (req.http.X-PX-config:module-mode == \"1\" || req.http.X-PX-config:module-mode == \"3\") {\n    # Module on active non-blocking mode, send block activity\n    set req.http.X-PX-block-reason = \"s2s_high_score\";\n    call px_send_block_activity;\n    set req.http.X-PX-block-activity-sent = \"1\";\n  }\n}\n\n\nsub px_handle_request_after_restart {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_handle_request_after_restart\";\n  }\n\n  declare local var.rtt INTEGER;\n  if (req.http.X-PX-validating-s2s == \"1\") {\n    unset req.http.X-PX-validating-s2s;\n    set var.rtt = std.atoi(time.elapsed.msec);\n    set var.rtt -= std.atoi(req.http.X-PX-risk-rtt-start);\n    set req.http.X-PX-risk-rtt = var.rtt;\n\n    set req.http.X-PX-made-s2s-call = \"1\";\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      set req.http.x-px-debug-timing = req.http.x-px-debug-timing + \" | px_handle_request_after_restart(s2s: \" req.http.X-PX-validating-s2s \"):\" time.elapsed.msec;\n    }\n    set req.http.X-PX-internal-flow = \"1\";\n    if (!req.http.X-PX-validated-request) {\n      unset req.http.X-PX-validating-s2s;\n      # Handle block s2s response\n      call px_handle_unvalidated_s2s_after_restart;\n    } else {\n      set req.http.should-send-page-requested = \"1\";\n      if (req.http.X-PX-data-enrichment) {\n        set req.http.X-PX-data-enrichment-validated = \"1\";\n        unset req.http.X-PX-de-pass-request;\n\n        call px_custom_data_enrichment_handler;\n\n        # Request was verified and data enrichment requires pass to BE\n        if (req.http.X-PX-de-pass-request == \"1\") {\n          return(pass);\n        }\n      }\n    }\n  }\n}\n\n\nsub px_handle_risk_cookie_flow {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_handle_risk_cookie_flow\";\n  }\n\n  # Set default s2s reason\n  set req.http.X-PX-ADD-s2s-call-reason = \"no_cookie\";\n\n  # Set empty vid instead of default (null) value\n  if (!req.http.X-PX-vid || req.http.X-PX-vid == \"(null)\") {\n    set req.http.X-PX-vid = \"\";\n  }\n\n  # Perform cookie based logic if cookie exists\n  if (req.http.X-PX-ADD-px-cookie) {\n    call px_validate_hash_and_expiration;\n  }\n\n  #check for sensitive routes\n  call px_custom_check_sensitive_route;\n  if (req.http.X-PX-sensitive-route == \"1\" && req.http.X-PX-pass-reason) {\n    set req.http.X-PX-ADD-s2s-call-reason = \"sensitive_route\";\n    unset req.http.X-PX-validated-request;\n  }\n\n  if (req.http.X-PX-pxhd && !(req.http.X-PX-pxhd == \"(null)\") && req.http.X-PX-ADD-s2s-call-reason == \"no_cookie\") {\n      set req.http.X-PX-ADD-s2s-call-reason = \"no_cookie_w_vid\";\n  }\n\n  # Call server to server if request was not already validated\n  if (!req.http.X-PX-validated-request) {\n    unset req.http.X-PX-request-exceeded-size-limit;\n    # Handle size exceeded post requests\n    if (req.request != \"GET\" && std.atoi(req.http.content-length) >= 8192) {\n      call px_handle_exceeded_post_requests;\n    }\n\n    if (req.http.X-PX-config:module-mode == \"0\") {\n      call px_send_risk_api_async_activity;\n      set req.http.X-PX-pass-reason = \"async_monitor_mode\";\n      if (req.http.X-PX-request-exceeded-size-limit == \"1\") {\n        set req.http.X-PX-pass-reason = \"request_exceeded_size\";\n      }\n    } else {\n      call px_set_server_2_server_data;\n      return(pass);\n    }\n  }\n\n  # If page block activity was sent already, no need to send page requested activity\n  # also send the activity if its in async mode\n  if (req.http.X-PX-block-activity-sent != \"1\") {\n    set req.http.should-send-page-requested = \"1\";\n  }\n  unset req.http.X-PX-block-activity-sent;\n\n  # If request was validated and data-enrichment-payload exists, call custom function to handle it\n  if (req.http.X-PX-data-enrichment-payload) {\n    unset req.http.X-PX-de-pass-request;\n    call px_data_enrichment_validation;\n  }\n\n  # Request was verified and data enrichment requries pass to BE\n  if (req.http.X-PX-de-pass-request == \"1\") {\n    return(pass);\n  }\n}\n\nsub px_data_enrichment_validation {\n  declare local var.data_enrichment_hmac STRING;\n  declare local var.data_enrichment_digest_hmac STRING;\n  set req.http.X-PX-data-enrichment-validated = \"0\";\n\n  if (req.http.X-PX-data-enrichment-payload ~ \"([0-9a-f]+):(.+)\") {\n    set var.data_enrichment_hmac = re.group.1;\n    set req.http.X-PX-data-enrichment = digest.base64_decode(urldecode(re.group.2));\n    set var.data_enrichment_digest_hmac = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.data_enrichment_hmac), \"^0x\", \"\");\n\n\n    if (var.data_enrichment_digest_hmac == var.data_enrichment_hmac) {\n      set req.http.X-PX-data-enrichment-validated = \"1\";\n    }\n\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" data-enrichment: \" req.http.X-PX-data-enrichment \" data-enrichment-hmac: \" var.data_enrichment_hmac \" data-enrichment-digest-hmac: \" var.data_enrichment_digest_hmac \" validation: \" req.http.X-PX-data-enrichment-validated;\n    }\n  }\n  call px_custom_data_enrichment_handler;\n}\n\n\n\nsub px_handle_first_request {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_handle_first_request\";\n  }\n\n  #custom params\n  call px_custom_enrich_risk_custom_params;\n\n  #login credentials extraction\n  if(req.http.X-PX-config:enable-login_creds-extraction == \"1\") {\n     call extract_login_credentials;\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    set req.http.x-px-debug-timing = req.http.x-px-debug-timing + \" | px_handle_first_request: \" time.elapsed.msec;\n  }\n  \n  call px_set_temp_xff;\n  unset req.http.X-PX-pass-reason;\n  unset req.http.X-PX-validated-request;\n  unset req.http.X-PX-validating-s2s;\n  unset req.http.X-PX-clean-risk-cookie;\n  unset req.http.X-PX-block-activity-sent;\n  \n  if (req.http.X-PX-ENFORCER-TELEMETRY) {\n    call handle_enforcer_telemetry_request;\n  }\n\n  set req.http.X-PX-ADD-cookie-origin = \"cookie\";\n  if (req.http.cookie ~ \"_px2=([^;]*)\") {\n    set req.http.X-PX-ADD-px-orig-cookie = re.group.1;\n  }\n\n  if (req.http.cookie ~ \"_pxvid=([^;]*)\") {\n    set req.http.X-PX-vid = re.group.1;\n    set req.http.X-PX-ADD-enforcer-vid-source = \"vid_cookie\";\n  }\n\n  if (req.http.cookie ~ \"pxvid=([^;]*)\" && !req.http.X-PX-vid) {\n    set req.http.X-PX-vid = re.group.1;\n    set req.http.X-PX-ADD-enforcer-vid-source = \"vid_cookie\";\n  }\n\n  if (req.http.cookie ~ \"_pxhd=([^;]*)\") {\n    set req.http.X-PX-pxhd = re.group.1;\n  }\n\n  if (req.http.X-PX-config:enable-cookie-from-header == \"1\" && !req.http.X-PX-ADD-px-orig-cookie) {\n    call px_custom_extract_cookie_from_header;\n    if (req.http.X-PX-ADD-px-orig-cookie) {\n      set req.http.X-PX-ADD-cookie-origin = \"token\";\n    }\n  }\n\n  if (req.http.X-PX-AUTHORIZATION) {\n    set req.http.X-PX-ADD-cookie-origin = \"header\";\n\n    if (req.http.X-PX-original-token) {\n      set req.http.X-PX-ADD-original-token = req.http.X-PX-original-token;\n      if (req.http.X-PX-original-token ~ \"2:(.+)\") {\n        set req.http.X-PX-ADD-original-token = re.group.1;\n      }\n    }\n\n    if (req.http.X-PX-AUTHORIZATION ~ \"2:(.+)\") {\n      set req.http.X-PX-ADD-px-orig-cookie = re.group.1;\n    } else {\n      set req.http.X-PX-ADD-px-orig-cookie = req.http.X-PX-AUTHORIZATION;\n    }\n  }\n\n  if (req.http.X-PX-ADD-px-orig-cookie) {\n    if (req.http.X-PX-ADD-px-orig-cookie != \"\") {\n\n      # Adding cookie to the requests being sent to PX\n      if (req.http.X-PX-config:enable-debug == \"1\") {\n        log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" found cookie in \" req.http.X-PX-ADD-cookie-origin \" px cookie value is \" req.http.X-PX-ADD-px-orig-cookie \" \" req.http.x-px-debug-timing;\n      }\n\n      set req.http.X-PX-ADD-px-cookie = digest.base64_decode(urldecode(req.http.X-PX-ADD-px-orig-cookie));\n      call px_capture_cookie_fields;\n    } else {\n       set req.http.X-PX-ADD-px-cookie = req.http.X-PX-ADD-px-orig-cookie;\n    }\n  }\n\n  # Data enrichment cookie flow\n  unset req.http.X-PX-data-enrichment-payload;\n  unset req.http.X-PX-data-enrichment-validated;\n  if (req.http.cookie ~ \"_pxde=([^;]*)\") {\n    set req.http.X-PX-data-enrichment-payload = re.group.1;\n  }\n\n  call px_handle_risk_cookie_flow;\n}\n\nsub extract_login_credentials {\n  call px_custom_is_login_request;\n  if(req.http.login-set) {\n    declare local var.method_key STRING;\n    set var.method_key = \"login_creds::method\" req.http.login-set;\n    \n    if(req.request != std.toupper(table.lookup(px_login, var.method_key))) {\n      #not the same req method\n      return;\n    }\n\n    declare local var.user STRING;\n    declare local var.pass STRING;\n\n    declare local var.sent_through_key STRING;\n    declare local var.content_type_key STRING;\n    declare local var.encoding_key STRING;\n    declare local var.user_field_key STRING;\n    declare local var.pass_field_key STRING;\n    \n    set var.sent_through_key = \"login_creds::sent_through\" req.http.login-set;\n    set var.content_type_key = \"login_creds::content_type\" req.http.login-set;\n    set var.encoding_key = \"login_creds::encoding\" req.http.login-set;\n    set var.encoding_key = \"login_creds::user_field_key\" req.http.login-set;\n    set var.encoding_key = \"login_creds::pass_field_key\" req.http.login-set;\n    \n    if(std.toupper(table.lookup(px_login, var.method_key)) == \"POST\") {\n      if(std.toupper(table.lookup(px_login, var.content_type_key)) == \"JSON\"\n        && std.toupper(table.lookup(px_login, var.encoding_key)) == \"CLEAR-TEXT\") {\n        # extract user\/pass\n        declare local var.FieldWraped STRING;\n        \n        #user\n        set var.FieldWraped = \"%22\" table.lookup(px_login, \"login_creds::user_field\") \"%22\";\n        set var.user = if(std.strstr(req.body, var.FieldWraped) ~ {\"(?U).*:[\\s]*\"(.*[^\\\\])\"\"}, regsuball(re.group.1, \"\\\\\", \"\"), \"\");\n\n        #password\n        set var.FieldWraped = \"%22\" table.lookup(px_login, \"login_creds::pass_field\") \"%22\";\n        set var.pass = if(std.strstr(req.body, var.FieldWraped) ~ {\"(?U).*:[\\s]*\"(.*[^\\\\])\"\"}, regsuball(re.group.1, \"\\\\\", \"\"), \"\");\n      }\n      else if(std.toupper(table.lookup(px_login, var.content_type_key)) == \"FORM-DATA\"\n        && std.toupper(table.lookup(px_login, var.encoding_key)) == \"URL-ENCODE\") {\n        # extract user\/pass\n\n        #user\n        set var.user = if(std.strstr(req.body, table.lookup(px_login, \"login_creds::user_field\")) ~ {\"(?U).*=(.*)(&|$)\"}, urldecode(re.group.1), \"\");\n\n        #password\n        set var.pass = if(std.strstr(req.body, table.lookup(px_login, \"login_creds::pass_field\")) ~ {\"(?U).*=(.*)(&|$)\"}, urldecode(re.group.1), \"\");\n      }\n    }\n\n    #hash credentials\n    if(var.user != \"\" && var.pass != \"\") {\n      set req.http.x-px-creds:user = digest.hash_sha256(var.user);                # user\n      set req.http.x-px-creds:password = digest.hash_sha256(var.pass);            # pass\n      set req.http.x-px-creds:user_pass = digest.hash_sha256(var.user var.pass);  # user & pass\n    }\n  }\n}\n\nsub handle_enforcer_telemetry_request {\n  declare local var.hmac_pass_string STRING;\n  declare local var.command_after_base64_decode STRING;\n  declare local var.actual_pass_hash STRING;\n  declare local var.cookie_validity STRING;\n  declare local var.cookie_validity_sec STRING;\n\n  set var.command_after_base64_decode = digest.base64_decode(urldecode(req.http.X-PX-ENFORCER-TELEMETRY));\n  set var.cookie_validity = if (var.command_after_base64_decode ~ {\"([0-9]*):([^\"]*)\"}, re.group.1, \"\");\n  set var.cookie_validity_sec = if (var.cookie_validity ~ {\"([0-9]{10})\"}, re.group.1, \"\");\n  set var.hmac_pass_string = if (var.command_after_base64_decode ~ {\"([0-9]*):([^\"]*)\"}, re.group.2, \"\");\n  set var.actual_pass_hash = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.cookie_validity), \"^0x\", \"\");\n\n  if (var.actual_pass_hash == var.hmac_pass_string && time.is_after(std.integer2time(std.atoi(var.cookie_validity_sec)), now)) {\n    call px_send_telemetry_activity;\n  }\n}\n\n\nsub px_set_server_2_server_data {\n  set req.backend = PX_API;\n  call set_custom_risk_backend_overwrite;\n  set req.http.X-PX-validating-s2s = \"1\";\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_set_server_2_server_data - Sending server 2 server request - ip:\" req.http.Fastly-Client-IP \" method:\" req.request \" time:\" now.sec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \" enforcer vid source - \" req.http.X-PX-ADD-enforcer-vid-source \" call reason - \" req.http.X-PX-ADD-s2s-call-reason;\n  }\n}\n\n\nsub px_prepare_s2s_bereq {\n  call px_prepare_bereq;\n  set bereq.url = \"\/api\/v3\/risk\";\n  set bereq.http.X-PX-ADD-http-version = req.http.X-PX-config:http-version;\n  set bereq.http.X-PX-ADD-http-method = req.request;\n  set bereq.http.X-PX-ADD-module-version = req.http.X-PX-config:ADD-module-version;\n  set bereq.http.X-PX-ADD-request-cookie-names = regsub(regsuball(req.http.cookie, \"=.*?(;|$)\", \",\"),\",$\",\"\");\n\n  if(req.http.x-px-creds) {\n    set bereq.http.X-PX-ADD-login-user = req.http.x-px-creds:user;\n    set bereq.http.X-PX-ADD-login-password = req.http.x-px-creds:password;\n    set bereq.http.X-PX-ADD-login-user-password = req.http.x-px-creds:user_pass;\n  }\n  \n  # set risk_mode header\n  if (req.http.X-PX-config:module-mode == \"1\") {\n    set bereq.http.X-PX-ADD-risk-mode = \"monitor\";\n  } else if (req.http.X-PX-config:module-mode == \"2\") {\n    set bereq.http.X-PX-ADD-risk-mode = \"active_blocking\";\n  } else if (req.http.X-PX-config:module-mode == \"3\") {\n    set bereq.http.X-PX-ADD-risk-mode = \"monitor_with_rate_limit\";\n  }\n\n  set req.http.X-PX-risk-rtt-start = time.elapsed.msec;\n  set bereq.http.X-PX-url = req.protocol \":\/\/\" req.http.host req.url;\n}\n\n\nsub px_handle_s2s_response {\n  declare local var.X-PX-risk-block-result STRING;\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_handle_s2s_response\";\n    set req.http.x-px-debug-timing = req.http.x-px-debug-timing + \" | px_handle_s2s_response: \" time.elapsed.msec;\n  }\n\n  if (beresp.status == 200) {\n    set req.http.X-PX-data-enrichment = beresp.http.X-PX-data-enrichment;\n    if (req.http.X-PX-data-enrichment) {\n        set req.http.X-PX-data-enrichment-validated = \"1\";\n    }\n    set var.X-PX-risk-block-result = beresp.http.X-PX-cookie-cfg-block-result;\n    # Override cookie uuid if reached to this part\n    set req.http.X-PX-uuid = beresp.http.X-PX-uuid;\n    if (beresp.http.X-PX-vid) {\n      set req.http.X-PX-vid = beresp.http.X-PX-vid;\n    }\n    set req.http.X-PX-pxhd = beresp.http.X-PX-pxhd;\n\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_handle_s2s_response - After S2S - block result - \" var.X-PX-risk-block-result;\n    }\n    if (var.X-PX-risk-block-result == \"1\") {\n      set req.http.X-PX-action = beresp.http.X-PX-action;\n      set req.http.X-PX-action-data = beresp.http.X-PX-action-data-body;\n      unset req.http.X-PX-validated-request;\n      set req.http.X-PX-block-reason = \"s2s_high_score\";\n    } else {\n      set req.http.X-PX-validated-request = \"1\";\n      set req.http.X-PX-pass-reason = \"s2s\";\n    }\n  }\n  else if(beresp.status == 413) {\n    #header overflow by px\n    if(req.http.X-PX-config:block-request-by-large-headers-size == \"1\") {\n      set req.http.X-PX-action = \"c\";\n      unset req.http.X-PX-validated-request;\n      set req.http.X-PX-block-reason = \"request_exceeded_size\";\n    }\n    else {\n      set req.http.X-PX-validated-request = \"1\";\n      set req.http.X-PX-pass-reason = \"request_exceeded_size\";\n    }\n  } else {\n    if (req.http.X-PX-config:enable-error == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:error-syslog-name \" :: [PX-ERROR] Risk api error - Status:\" beresp.status \", Response:\" beresp.response \" ,timing:\" time.elapsed.msec \" ms\";\n    }\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_handle_s2s_response - After S2S request. unexpected error from server, passing traffic. Status - \" beresp.status \" Message - \" beresp.response;\n    }\n    # Unexpected s2s error let it pass\n\n    set req.http.X-PX-validated-request = \"1\";\n    set req.http.X-PX-pass-reason = \"s2s_error\";\n  }\n\n  restart;\n}\n\nsub px_send_risk_api_async_activity {\n  if (req.http.X-PX-config:send-page-activities == \"1\") {\n    call px_custom_activity_headers;\n    log \"\"\n     \"syslog \" req.service_id \" \" req.http.X-PX-config:syslog-name \" :: px-body type:risk_api\" \n     \"|~|ip:\" req.http.Fastly-Client-IP \n     \"|~|time:\" time.start.msec \n     \"|~|uuid:\" req.http.X-PX-uuid \n     \"|~|url:\"  req.protocol \":\/\/\" req.http.host req.url \n     \"|~|pxhd:\" req.http.X-PX-pxhd \n     \"|~|vid:\" req.http.X-PX-vid \n     \"|~|add-enforcer_vid_source:\" req.http.X-PX-ADD-enforcer-vid-source   \n     \"|~|appId:\" req.http.X-PX-config:app-id \n     \"|~|h-x-forwarded-for:\" req.http.x-forwarded-for \n     \"|~|h-x-real-ip:\" req.http.x-real-ip \n     \"|~|h-x-cluster-client-ip:\" req.http.x-cluster-client-ip \n     \"|~|h-x-forwarded:\" req.http.x-forwarded \n     \"|~|h-forwarded-for:\" req.http.forwarded-for \n     \"|~|h-forwarded:\" req.http.forwarded \n     \"|~|h-host:\" req.http.host \n     \"|~|h-origin:\" req.http.origin \n     \"|~|h-accept:\" req.http.accept \n     \"|~|h-x-requested-with:\" req.http.x-requested-with \n     \"|~|h-x-px-access-token:\" req.http.x-px-access-token \n     \"|~|h-x-px-authorization:\" req.http.X-PX-AUTHORIZATION \n     \"|~|h-content-length:\" req.http.content-length \n     \"|~|h-referer:\" req.http.referer \n     \"|~|h-User-Agent:\" req.http.User-Agent \n     if(req.http.X-PX-custom-param1, \"|~|add-custom_param1:\" req.http.X-PX-custom-param1, \"\") \n     if(req.http.X-PX-custom-param2, \"|~|add-custom_param2:\" req.http.X-PX-custom-param2, \"\") \n     if(req.http.X-PX-custom-param3, \"|~|add-custom_param3:\" req.http.X-PX-custom-param3, \"\") \n     if(req.http.X-PX-custom-param4, \"|~|add-custom_param4:\" req.http.X-PX-custom-param4, \"\") \n     if(req.http.X-PX-custom-param5, \"|~|add-custom_param5:\" req.http.X-PX-custom-param5, \"\") \n     if(req.http.X-PX-custom-param6, \"|~|add-custom_param6:\" req.http.X-PX-custom-param6, \"\") \n     if(req.http.X-PX-custom-param7, \"|~|add-custom_param7:\" req.http.X-PX-custom-param7, \"\") \n     if(req.http.X-PX-custom-param8, \"|~|add-custom_param8:\" req.http.X-PX-custom-param8, \"\") \n     if(req.http.X-PX-custom-param9, \"|~|add-custom_param9:\" req.http.X-PX-custom-param9, \"\") \n     if(req.http.X-PX-custom-param10, \"|~|add-custom_param10\" req.http.X-PX-custom-param10, \"\") \n     \"|~|add-http_version:\" req.http.X-PX-config:http-version \n     \"|~|add-module_version:\" req.http.X-PX-config:ADD-module-version \n     \"|~|add-http_method:\" req.request \n     \"|~|add-s2s_call_reason:\" req.http.X-PX-ADD-s2s-call-reason \n     \"|~|add-px_cookie:\" req.http.X-PX-ADD-px-cookie \n     \"|~|add-px_orig_cookie:\" req.http.X-PX-ADD-px-orig-cookie \n     \"|~|add-tls_protocol:\" req.http.X-PX-ADD-tls:protocol \n     \"|~|add-tls_server:\" req.http.X-PX-ADD-tls:server \n     \"|~|add-tls_cipher:\" req.http.X-PX-ADD-tls:cipher \n     \"|~|add-tls_ciphers_sha:\" req.http.X-PX-ADD-tls:cipher-sha \n     \"|~|add-tls_extension_sha:\" req.http.X-PX-ADD-tls:extension-sha \n     \"|~|add-fst_server_identity:\" server.identity \n     \"|~|add-fst_server_region:\" server.region \n     \"|~|add-fst_server_datacenter:\" server.datacenter \n     \"|~|add-cookie_origin:\" req.http.X-PX-ADD-cookie-origin    \n     \"|~|add-risk_mode: async_monitor\" \n     if(req.http.x-px-creds:user, \"|~|add-login_user:\" req.http.x-px-creds:user, \"\")\n     if(req.http.x-px-creds:password, \"|~|add-login_password:\" req.http.x-px-creds:password, \"\")\n     if(req.http.x-px-creds:user_pass, \"|~|add-login_user_password:\" req.http.x-px-creds:user_pass, \"\")\n     if(req.http.X-PX-additional-activity-headers, req.http.X-PX-additional-activity-headers, \"\")\n    \"\";\n\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_send_risk_api_async_activity - Risk activity - ip:\" req.http.Fastly-Client-IP \" http_version:\" req.http.X-PX-config:http-version \" module_version:\" req.http.X-PX-config:ADD-module-version \" http_method:\" req.request \" time:\" time.start.msec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \"enforcer vid source:\" req.http.X-PX-ADD-enforcer-vid-source \" appId:\" req.http.X-PX-config:app-id \" s2s-call-reason:\" req.http.X-PX-ADD-s2s-call-reason \" px_cookie:\" req.http.X-PX-ADD-px-cookie \" add-tls_protocol:\" req.http.X-PX-ADD-tls:protocol \" add-tls_server:\" req.http.X-PX-ADD-tls:server \" add-tls_cipher:\" req.http.X-PX-ADD-tls:cipher \" add-tls_ciphers_sha:\" req.http.X-PX-ADD-tls:cipher-sha \" add-tls_extension_sha:\" req.http.X-PX-ADD-tls:extension-sha;\n    }\n  }\n}\n\nsub px_send_page_requested_activity {\n  if (req.http.X-PX-config:send-page-activities == \"1\") {\n    call px_custom_activity_headers;\n    \n    log \"\" \n    \"syslog \" req.service_id \" \" req.http.X-PX-config:syslog-name \" :: px-body type:page_requested\"\n    \"|~|ip:\" req.http.Fastly-Client-IP \n    \"|~|module_version:\" req.http.X-PX-config:ADD-module-version \n    \"|~|http_method:\" req.request \n    \"|~|pxhd:\" req.http.X-PX-pxhd \n    \"|~|http_version:\" req.http.X-PX-config:http-version \n    \"|~|time:\" time.start.msec \n    \"|~|url:\"  req.protocol \":\/\/\" req.http.host req.url \n    \"|~|vid:\" req.http.X-PX-vid \n    \"|~|pass_reason:\" req.http.X-PX-pass-reason  \n    \"|~|appId:\" req.http.X-PX-config:app-id \n    if(req.http.X-PX-custom-param1, \"|~|det-custom_param1:\" req.http.X-PX-custom-param1, \"\") \n    if(req.http.X-PX-custom-param2, \"|~|det-custom_param2:\" req.http.X-PX-custom-param2, \"\") \n    if(req.http.X-PX-custom-param3, \"|~|det-custom_param3:\" req.http.X-PX-custom-param3, \"\") \n    if(req.http.X-PX-custom-param4, \"|~|det-custom_param4:\" req.http.X-PX-custom-param4, \"\") \n    if(req.http.X-PX-custom-param5, \"|~|det-custom_param5:\" req.http.X-PX-custom-param5, \"\") \n    if(req.http.X-PX-custom-param6, \"|~|det-custom_param6:\" req.http.X-PX-custom-param6, \"\") \n    if(req.http.X-PX-custom-param7, \"|~|det-custom_param7:\" req.http.X-PX-custom-param7, \"\") \n    if(req.http.X-PX-custom-param8, \"|~|det-custom_param8:\" req.http.X-PX-custom-param8, \"\") \n    if(req.http.X-PX-custom-param9, \"|~|det-custom_param9:\" req.http.X-PX-custom-param9, \"\") \n    if(req.http.X-PX-custom-param10, \"|~|det-custom_param10\" req.http.X-PX-custom-param10, \"\") \n    \"|~|det-risk_mode:\" req.http.X-PX-ADD-risk-mode \n    \"|~|det-fst_error_response:\" req.http.X-PX-error-response \n    \"|~|det-fst_error_status:\" req.http.X-PX-error-status \n    \"|~|det-fst_server_identity:\" server.identity \n    \"|~|det-fst_server_region:\" server.region \n    \"|~|det-fst_server_datacenter:\" server.datacenter \n    \"|~|det-px_cookie:\" req.http.X-PX-ADD-px-cookie \n    \"|~|det-px_orig_cookie:\" req.http.X-PX-ADD-px-orig-cookie \n    \"|~|det-client_uuid:\" req.http.X-PX-uuid \n    \"|~|det-cookie_origin:\" req.http.X-PX-ADD-cookie-origin \n    \"|~|det-tls-protocol:\" req.http.X-PX-ADD-tls:protocol \n    \"|~|det-tls-server:\" req.http.X-PX-ADD-tls:server \n    \"|~|det-tls-cipher:\" req.http.X-PX-ADD-tls:cipher \n    \"|~|det-tls-cipher-sha:\" req.http.X-PX-ADD-tls:cipher-sha \n    \"|~|det-tls-extension-sha:\" req.http.X-PX-ADD-tls:extension-sha \n    if(req.http.x-px-creds:user, \"|~|det-login_user:\" req.http.x-px-creds:user, \"\")\n    if(req.http.x-px-creds:password, \"|~|det-login_password:\" req.http.x-px-creds:password, \"\")\n    if(req.http.x-px-creds:user_pass, \"|~|det-login_user_password:\" req.http.x-px-creds:user_pass, \"\")\n    if(req.http.X-PX-pass-reason ~ \"s2s\", \"|~|det-risk_rtt:\" req.http.X-PX-risk-rtt, \"\") \n    \"|~|det-response_status_code:\" resp.status \n    \"|~|h-x-forwarded-for:\" req.http.x-forwarded-for \n    \"|~|h-x-real-ip:\" req.http.x-real-ip \n    \"|~|h-x-cluster-client-ip:\" req.http.x-cluster-client-ip \n    \"|~|h-x-forwarded:\" req.http.x-forwarded \n    \"|~|h-forwarded-for:\" req.http.forwarded-for \n    \"|~|h-forwarded:\" req.http.forwarded \n    \"|~|h-host:\" req.http.host \n    \"|~|h-origin:\" req.http.origin \n    \"|~|h-accept:\" req.http.accept \n    \"|~|h-x-requested-with:\" req.http.x-requested-withi \n    \"|~|h-x-px-authorization:\" req.http.X-PX-AUTHORIZATION \n    \"|~|h-content-length:\" req.http.content-length \n    \"|~|h-referer:\" req.http.referer \n    \"|~|h-User-Agent:\" req.http.User-Agent \n    \"|~|h-x-px-access-token:\" req.http.x-px-access-token \n    if(req.http.X-PX-additional-activity-headers, req.http.X-PX-additional-activity-headers, \"\") \n    \"\";\n    \n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_send_page_requested_activity - Page requested activity - ip:\" req.http.Fastly-Client-IP \" http_version:\" req.http.X-PX-config:http-version \" module_version:\" req.http.X-PX-config:ADD-module-version \" http_method:\" req.request \" time:\" time.start.msec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \" appId:\" req.http.X-PX-config:app-id \" det-px_cookie:\" req.http.X-PX-ADD-px-cookie \" pass_reason: \" req.http.X-PX-pass-reason;\n    }\n  }\n}\n\nsub px_send_telemetry_activity {\n  if (req.http.X-PX-config:send-page-activities == \"1\") {\n    declare local var.enforcer-config STRING;\n    declare local var.custom-logo-config STRING;\n    \n    call px_get_csp_data;\n    \n    set var.custom-logo-config = table.lookup(px_configs, \"CUSTOM_LOGO\", \"\");\n    set var.enforcer-config = \"\"\n     \"{\" \n     \"%22debug_mode%22: %22\" req.http.X-PX-config:enable-debug \"%22,\" \n     \"%22px_app_id%22: %22\" req.http.X-PX-config:app-id \"%22,\" \n     \"%22enable_mode%22: %22\" req.http.X-PX-config:enable-module \"%22,\" \n     \"%22send_page_activities%22: %22\" req.http.X-PX-config:send-page-activities \"%22,\" \n     \"%22module_mode%22: %22\" req.http.X-PX-config:module-mode \"%22,\" \n     \"%22first_party_mode%22: %22\" req.http.X-PX-config:first-party-mode \"%22,\" \n     \"%22redirect_xhr%22: %22\" req.http.X-PX-config:xhr-enabled \"%22,\" \n     \"%22add_block_result_header%22: %22\" req.http.X-PX-config:add-block-result-header \"%22,\" \n     \"%22block_all_large_post_requests%22: %22\" req.http.X-PX-config:block-all-large-post-requests \"%22,\" \n     \"%22block_large_post_specific_routes%22: %22\" req.http.X-PX-config:block-large-post-specific-routes \"%22,\" \n     \"%22block_large_post_by_size%22: %22\" req.http.X-PX-config:block-large-post-by-size \"%22,\" \n     \"%22enable_sensitive_routes%22: %22\" req.http.X-PX-config:enable-sensitive-routes \"%22,\" \n     \"%22enable_cookie_from_header%22: %22\" req.http.X-PX-config:enable-cookie-from-header \"%22,\" \n     \"%22enable_block_specific_routes%22: %22\" req.http.X-PX-config:enable-block-specific-routes \"%22,\" \n     \"%22enable_access_control_header%22: %22\" req.http.X-PX-config:enable-access-control-header \"%22,\" \n     \"%22http_version%22: %22\" req.http.X-PX-config:http-version \"%22,\" \n     \"%22custom_logo%22: %22\" var.custom-logo-config \"%22,\" \n     \"%22css_ref%22: %22\" req.http.X-PX-css-ref \"%22,\" \n     \"%22js_ref%22: %22\" req.http.X-PX-js-ref \"%22,\" \n     \"%22syslog_name%22: %22\" req.http.X-PX-config:syslog-name \"%22,\" \n     \"%22module_version%22: %22\" req.http.X-PX-config:ADD-module-version \"%22,\" \n     \"%22debug_syslog_name%22: %22\" req.http.X-PX-config:debug-syslog-name \"%22,\" \n     \"%22error_syslog_name%22: %22\" req.http.X-PX-config:error-syslog-name \"%22,\" \n     \"%22block_request_by_large_headers_size%22: %22\" req.http.X-PX-config:block-request-by-large-headers-size \"%22,\" \n     \"%22service_id%22: %22\" req.service_id \"%22,\" \n     \"%22remote_data%22: %22\" req.http.X-PX-config:remote-data \"%22,\" \n     \"%22enable_login_creds_extraction%22: %22\" req.http.X-PX-config:enable-login_creds-extraction \"%22,\" \n     \"%22csp_enable%22: %22\" req.http.X-PX-config:csp-enable \"%22\" \n     if(req.http.csp, \", %22csp%22: %22\" req.http.csp \"%22\", \"\") \n     if(req.http.cspro, \", %22cspro%22: %22\" req.http.cspro \"%22\", \"\") \n     if(req.http.cspro_p2, \", %22cspro_p2%22: %22\" req.http.cspro_p2 \"%22\", \"\") \n     if(req.http.cspro_exposure, \", %22cspro_exposure%22: %22\" req.http.cspro_exposure \"%22\", \"\") \n     if(req.http.cspro_p2_exposure, \", %22cspro_p2_exposure%22: %22\" req.http.cspro_p2_exposure \"%22\", \"\")\n     if(table.lookup(px_csp_rdata, \"csp::policy_id\") ~ \"^(.*)::1$\", \", %22csp_policyId%22: %22\" re.group.1 \"%22\", \"\") \n     if(table.lookup(px_csp_rdata, \"csp::health_check\") ~ \"^(.*)$\", \", %22csp_health_check%22: %22\" re.group.1 \"%22\", \"\") \n     \"}\"\n     \"\";\n    \n    call px_custom_activity_headers;\n    \n    log \"\"\n     \"syslog \" req.service_id \" \" req.http.X-PX-config:syslog-name \" :: px-body type:enforcer_telemetry\" \n     \"|~|ip:\" req.http.Fastly-Client-IP \n     \"|~|appId:\" req.http.X-PX-config:app-id \n     \"|~|time:\" time.start.msec \n     \"|~|h-x-px-access-token:\" req.http.x-px-access-token \n     \"|~|det-enforcer_configs:\" var.enforcer-config \n     \"|~|det-module_version:\" req.http.X-PX-config:ADD-module-version \n     \"|~|det-update_reason:initial_config\" \n     \"|~|h-x-forwarded-for:\" req.http.x-forwarded-for \n     \"|~|h-x-real-ip:\" req.http.x-real-ip \n     \"|~|h-x-cluster-client-ip:\" req.http.x-cluster-client-ip \n     \"|~|h-x-forwarded:\" req.http.x-forwarded \n     \"|~|h-forwarded-for:\" req.http.forwarded-for \n     \"|~|h-forwarded:\" req.http.forwarded \n     \"|~|h-host:\" req.http.host \n     \"|~|h-origin:\" req.http.origin \n     \"|~|h-accept:\" req.http.accept \n     \"|~|h-x-requested-with:\" req.http.x-requested-withi \n     \"|~|h-x-px-authorization:\" req.http.X-PX-AUTHORIZATION \n     \"|~|h-content-length:\" req.http.content-length \n     if(req.http.X-PX-additional-activity-headers, req.http.X-PX-additional-activity-headers, \"\")\n     \"\";\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_send_enforcer_telemetry_activity - Enforcer telemetry activity - ip:\" req.http.Fastly-Client-IP \" time: \" time.start.msec \" enforcer_configs: \" var.enforcer-config \" module_version: \" req.http.X-PX-config:ADD-module-version \" appId: \" req.http.X-PX-config:app-id;\n    }\n    \n    #clean headers\n    unset req.http.csp;\n    unset req.http.cspro;\n    unset req.http.cspro_p2;\n    unset req.http.cspro_exposure;\n    unset req.http.cspro_p2_exposure;\n  }\n}\n\nsub px_send_block_activity {\n  # Always set the block header result on both requests from risk api and cookie - even if page requested is off\n  if (req.http.X-PX-config:add-block-result-header == \"1\") {\n    set req.http.X-PX-block-result = \"1\";\n  }\n\n  if (req.http.X-PX-config:send-page-activities == \"1\") {\n    call px_custom_activity_headers;\n\n    log \"\"\n     \"syslog \" req.service_id \" \" req.http.X-PX-config:syslog-name \" :: px-body type:block\"\n     \"|~|ip:\" req.http.Fastly-Client-IP \n     \"|~|block_reason:\" req.http.X-PX-block-reason \n     \"|~|block_uuid:\" req.http.X-PX-uuid \n     \"|~|module_version:\" req.http.X-PX-config:ADD-module-version \n     \"|~|http_method:\" req.request \n     \"|~|pxhd:\" req.http.X-PX-pxhd \n     \"|~|http_version:\" req.http.X-PX-config:http-version \n     \"|~|time:\" time.start.msec \n     \"|~|url:\"  req.protocol \":\/\/\" req.http.host req.url \n     \"|~|vid:\" req.http.X-PX-vid \n     \"|~|appId:\" req.http.X-PX-config:app-id \n     \"|~|h-referer:\" req.http.referer \n     \"|~|h-User-Agent:\" req.http.User-Agent \n     \"|~|h-x-px-access-token:\" req.http.x-px-access-token    \n     \"|~|h-x-forwarded-for:\" req.http.x-forwarded-for \n     \"|~|h-x-real-ip:\" req.http.x-real-ip \n     \"|~|h-x-cluster-client-ip:\" req.http.x-cluster-client-ip \n     \"|~|h-x-forwarded:\" req.http.x-forwarded \n     \"|~|h-forwarded-for:\" req.http.forwarded-for \n     \"|~|h-forwarded:\" req.http.forwarded \n     \"|~|h-x-px-authorization:\" req.http.X-PX-AUTHORIZATION      \n     \"|~|h-host:\" req.http.host \n     \"|~|h-content-length:\" req.http.content-length \n     \"|~|h-origin:\" req.http.origin \n     if(req.http.X-PX-custom-param1, \"|~|det-custom_param1:\" req.http.X-PX-custom-param1, \"\") \n     if(req.http.X-PX-custom-param2, \"|~|det-custom_param2:\" req.http.X-PX-custom-param2, \"\") \n     if(req.http.X-PX-custom-param3, \"|~|det-custom_param3:\" req.http.X-PX-custom-param3, \"\") \n     if(req.http.X-PX-custom-param4, \"|~|det-custom_param4:\" req.http.X-PX-custom-param4, \"\") \n     if(req.http.X-PX-custom-param5, \"|~|det-custom_param5:\" req.http.X-PX-custom-param5, \"\") \n     if(req.http.X-PX-custom-param6, \"|~|det-custom_param6:\" req.http.X-PX-custom-param6, \"\") \n     if(req.http.X-PX-custom-param7, \"|~|det-custom_param7:\" req.http.X-PX-custom-param7, \"\") \n     if(req.http.X-PX-custom-param8, \"|~|det-custom_param8:\" req.http.X-PX-custom-param8, \"\") \n     if(req.http.X-PX-custom-param9, \"|~|det-custom_param9:\" req.http.X-PX-custom-param9, \"\") \n     if(req.http.X-PX-custom-param10, \"|~|det-custom_param10\" req.http.X-PX-custom-param10, \"\") \n     \"|~|det-block_action\" if(req.http.X-PX-action, req.http.X-PX-action, \"\") \n     \"|~|det-fst_server_identity:\" server.identity \n     \"|~|det-risk_mode:\" req.http.X-PX-ADD-risk-mode \n     \"|~|det-fst_server_region:\" server.region \n     \"|~|det-fst_server_datacenter:\" server.datacenter \n     \"|~|det-px_orig_cookie:\" req.http.X-PX-ADD-px-orig-cookie \n     if(req.http.X-PX-block-reason ~ \"s2s_high_score\", \"|~|det-risk_rtt:\" req.http.X-PX-risk-rtt, \"\") \n     \"|~|det-cookie_origin:\" req.http.X-PX-ADD-cookie-origin      \n     \"|~|det-tls-protocol:\" req.http.X-PX-ADD-tls:protocol \n     \"|~|det-tls-server:\" req.http.X-PX-ADD-tls:server \n     \"|~|det-tls-cipher:\" req.http.X-PX-ADD-tls:cipher \n     \"|~|det-tls-cipher-sha:\" req.http.X-PX-ADD-tls:cipher-sha \n     \"|~|det-tls-extension-sha:\" req.http.X-PX-ADD-tls:extension-sha \n     \"|~|det-simulated_block:\" if(req.http.X-PX-config:module-mode == \"2\", \"false\", \"true\") \n     if(req.http.x-px-creds:user, \"|~|det-login_user:\" req.http.x-px-creds:user, \"\")\n     if(req.http.x-px-creds:password, \"|~|det-login_password:\" req.http.x-px-creds:password, \"\")\n     if(req.http.x-px-creds:user_pass, \"|~|det-login_user_password:\" req.http.x-px-creds:user_pass, \"\")\n\n     if(req.http.X-PX-additional-activity-headers, req.http.X-PX-additional-activity-headers, \"\")\n     \"\";\n    \n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_send_block_activity - Block activity - enable-captcha:\" req.http.X-PX-config:enable-captcha \" ip:\" req.http.Fastly-Client-IP \" block_reason:\" req.http.X-PX-block-reason \" block_uuid:\" req.http.X-PX-uuid \" http_version:\" req.http.X-PX-config:http-version \" module_version:\" req.http.X-PX-config:ADD-module-version \" http_method:\" req.request \" time:\" time.start.msec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \" appId:\" req.http.X-PX-config:app-id;\n    }\n  }\n}\n\n\n\nsub px_capture_cookie_fields {\n  # Mandatory fields\n  set req.http.X-PX-cookie-data:cookie-validity = if (req.http.X-PX-ADD-px-cookie ~ {\"\"t\":([0-9]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-cookie-data:expected-hash = if (req.http.X-PX-ADD-px-cookie ~ {\"\"h\":\"([^\"]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-uuid = if (req.http.X-PX-ADD-px-cookie ~ {\"\"u\":\"([^\"]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-vid = if (req.http.X-PX-ADD-px-cookie ~ {\"\"v\":\"([^\"]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-ADD-enforcer-vid-source = \"risk_cookie\";\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_capture_cookie_fields - X-PX-cookie-validity - \" req.http.X-PX-cookie-data:cookie-validity \" X-PX-uuid - \" req.http.X-PX-uuid \" X-PX-vid - \" req.http.X-PX-vid;\n  }\n}\n\nsub px_capture_original_token_fields {\n  # Mandatory fields\n  set req.http.X-PX-original-token-expected-hash = if (req.http.X-PX-decoded-original-token ~ {\"\"h\":\"([^\"]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-ADD-original-uuid = if (req.http.X-PX-decoded-original-token ~ {\"\"u\":\"([^\"]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-vid = if (req.http.X-PX-decoded-original-token ~ {\"\"v\":\"([^\"]*)\"}, re.group.1, \"\");\n  set req.http.X-PX-original-token-validity = if (req.http.X-PX-decoded-original-token ~ {\"\"t\":([0-9]*)\"}, re.group.1, \"\");\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_capture_original_token_fields- HMAC[\" req.http.X-PX-original-token-expected-hash \"] | UUID[\" req.http.X-PX-ADD-original-uuid \"] | VID[\" req.http.X-PX-vid \"]\";\n  }\n}\n\nsub px_validate_original_token {\n  declare local var.actual_pass_hash STRING;\n  declare local var.actual_block_hash STRING;\n  declare local var.base_hmac_string STRING;\n  declare local var.hmac_pass_string STRING;\n  declare local var.hmac_block_string STRING;\n  if (!req.http.X-PX-original-token-expected-hash || !req.http.X-PX-ADD-original-uuid || !req.http.X-PX-vid) {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_validate_original_token - Invalid token, Missing mandatory fields - ip:\" req.http.Fastly-Client-IP \" method:\" req.request \" time:\" now.sec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \" secret - \" req.http.X-PX-config:cookie-secret \" uuid - \" req.http.X-PX-ADD-original-uuid \" vid - \" req.http.X-PX-vid \" ua - \" req.http.User-Agent \" HMAC - \" req.http.X-PX-cookie-data:expected-hash;\n    }\n    set req.http.X-PX-ADD-original-token-error = \"cookie_decryption_failed\";\n    return;\n  }\n\n  #Check that vid is valid\n  if (req.http.X-PX-vid !~ \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" || req.http.X-PX-ADD-original-uuid !~ \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\") {\n    call px_clean_original_token_headers;\n    set req.http.X-PX-ADD-original-token-error = \"cookie_decryption_failed\";\n    return;\n  }\n\n  set var.base_hmac_string = req.http.X-PX-original-token-validity req.http.X-PX-ADD-original-uuid req.http.X-PX-vid;\n  set var.hmac_pass_string = var.base_hmac_string \"0\";\n  set var.hmac_block_string = var.base_hmac_string \"1\";\n\n  set var.actual_pass_hash = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.hmac_pass_string), \"^0x\", \"\");\n  set var.actual_block_hash = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.hmac_block_string), \"^0x\", \"\");\n\n  if (var.actual_pass_hash != req.http.X-PX-original-token-expected-hash && var.actual_block_hash != req.http.X-PX-original-token-expected-hash) {\n    set req.http.X-PX-ADD-original-token-error = \"cookie_validation_failed\";\n    call px_clean_original_token_headers;\n  }\n\n  unset req.http.X-PX-original-token-expected-hash;\n}\n\n\nsub px_validate_hash_and_expiration {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_validate_hash_and_expiration\";\n  }\n\n  declare local var.actual_pass_hash STRING;\n  declare local var.actual_block_hash STRING;\n  declare local var.base_hmac_string STRING;\n  declare local var.hmac_pass_string STRING;\n  declare local var.hmac_block_string STRING;\n\n  # Check errors for mobile sdk\n  if (req.http.X-PX-ADD-cookie-origin == \"header\"){\n\n    if (req.http.X-PX-ADD-original-token) {\n      set req.http.X-PX-decoded-original-token = digest.base64_decode(urldecode(req.http.X-PX-ADD-original-token));\n      call px_capture_original_token_fields;\n      call px_validate_original_token;\n    }\n\n    if (req.http.X-PX-AUTHORIZATION ~ \"(^\\d+$)\"){\n      set req.http.X-PX-ADD-s2s-call-reason = \"mobile_error_\" re.group.1;\n      return;\n    }\n  }\n  \n  # If original cookie is not utf8, don't send a cookie header\n  # If decoded cookie is not utf8, or contains non-printable characters, send original cookie\n  # If both are utf8, send decoded cookie\n  if (!utf8.is_valid(req.http.X-PX-ADD-px-orig-cookie)) {\n    unset req.http.X-PX-ADD-px-orig-cookie;\n    unset req.http.X-PX-ADD-px-cookie;\n  } else if (!utf8.is_valid(req.http.X-PX-ADD-px-cookie) || req.http.X-PX-ADD-px-cookie ~ \"[^a-zA-Z0-9\\-:'\\x22{}\\[\\],]\") {\n    unset req.http.X-PX-ADD-px-cookie;\n  } else {\n    unset req.http.X-PX-ADD-px-orig-cookie;\n  }\n\n  # Check mandatory fields\n  if (!req.http.X-PX-cookie-data:cookie-validity || req.http.X-PX-cookie-data:cookie-validity == \"\" || !req.http.X-PX-cookie-data:expected-hash || req.http.X-PX-cookie-data:expected-hash == \"\" || std.atoi(req.http.X-PX-cookie-data:cookie-validity) == 0) {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_validate_hash_and_expiration - Invalid cookie, Missing mandatory fields - ip:\" req.http.Fastly-Client-IP \" method:\" req.request \" time:\" now.sec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \" secret - \" req.http.X-PX-config:cookie-secret \" validity - \" req.http.X-PX-cookie-data:cookie-validity \" uuid - \" req.http.X-PX-uuid \" vid - \" req.http.X-PX-vid \" ua - \" req.http.User-Agent \"expected-hash - \" req.http.X-PX-cookie-data:expected-hash;\n    }\n    call px_clean_cookie_headers;\n    set req.http.X-PX-ADD-s2s-call-reason = \"cookie_decryption_failed\";\n    return;\n  }\n\n  # Check that vid is valid\n  if (req.http.X-PX-vid !~ \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\" || req.http.X-PX-uuid !~ \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\") {\n    call px_clean_cookie_headers;\n    set req.http.X-PX-ADD-s2s-call-reason = \"cookie_decryption_failed\";\n    return;\n  }\n\n  # unset s2s-call-reason so it will not be \"no_cookie\"\n  unset req.http.X-PX-ADD-s2s-call-reason;\n\n  # Check if cookie is expired\n  declare local var.time_in_seconds INTEGER;\n  set var.time_in_seconds = std.atoi(req.http.X-PX-cookie-data:cookie-validity);\n  set var.time_in_seconds \/= 1000;\n\n  if (!time.is_after(std.integer2time(var.time_in_seconds), now)) {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_validate_hash_and_expiration - Cookie expired - ip:\" req.http.Fastly-Client-IP \" cookie_validity_sec:\" var.time_in_seconds \" method:\" req.request \" time:\" now.sec \" url:\" req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid;\n    }\n    set req.http.X-PX-ADD-s2s-call-reason = \"cookie_expired\";\n    return;\n  }\n\n  # Check if cookie contains pass result\n  set var.base_hmac_string = req.http.X-PX-cookie-data:cookie-validity req.http.X-PX-uuid req.http.X-PX-vid;\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" base hmac string \" var.base_hmac_string;\n  }\n\n  set var.hmac_pass_string = var.base_hmac_string \"0\" req.http.User-Agent;\n  if (req.http.X-PX-AUTHORIZATION){\n    set var.hmac_pass_string = var.base_hmac_string \"0\";\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" pass hmac string \" var.hmac_pass_string \" with User-Agent \" req.http.User-Agent;\n  }\n\n  set var.actual_pass_hash = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.hmac_pass_string), \"^0x\", \"\");\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" generated hmac string  \" var.actual_pass_hash \" compare against expected hmac: \" req.http.X-PX-cookie-data:expected-hash;\n  }\n  if (var.actual_pass_hash == req.http.X-PX-cookie-data:expected-hash) {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n      log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_validate_hash_and_expiration - Cookie Valid - ip:\" req.http.Fastly-Client-IP \" cookie_validity_sec:\" var.time_in_seconds \" method:\" req.request \" time:\" now.sec \" url:\" req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid;\n    }\n\n    # check if user blocked remotely\n    call is_user_blocked_remotely;\n    if(req.http.X-PX-BLOCKED-REMOTELY == \"1\") {\n      unset req.http.X-PX-BLOCKED-REMOTELY;\n      set req.http.X-PX-ADD-s2s-call-reason = \"remote_block_vid\";\n      return;\n    }\n    unset req.http.X-PX-BLOCKED-REMOTELY;\n\n    set req.http.X-PX-validated-request = \"1\";\n    set req.http.X-PX-pass-reason = \"cookie\";\n    return;\n  }\n\n  set var.hmac_block_string = var.base_hmac_string \"1\" req.http.User-Agent;\n  if (req.http.X-PX-AUTHORIZATION){\n    set var.hmac_block_string = var.base_hmac_string \"1\";\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" block hmac string \" var.hmac_block_string \" with User-Agent \" req.http.User-Agent;\n  }\n\n  # Check if cookie contains block result\n  set var.actual_block_hash = regsub(digest.hmac_sha256(req.http.X-PX-config:cookie-secret, var.hmac_block_string), \"^0x\", \"\");\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" generated hmac string  \" var.actual_block_hash \" compare against expected hmac: \" req.http.X-PX-cookie-data:expected-hash;\n  }\n  if (var.actual_block_hash == req.http.X-PX-cookie-data:expected-hash) {\n    if (req.http.X-PX-config:enable-debug == \"1\") {\n        log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_validate_hash_and_expiration - About to block - cookie_high_score. ip:\" req.http.Fastly-Client-IP \" method:\" req.request \" time:\" now.sec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid;\n    }\n    if (req.http.X-PX-config:module-mode == \"2\") {\n      # active blocking mode, start error flow\n      set req.http.X-PX-block-reason = \"cookie_high_score\";\n      error 995 \"cookie_high_score\";\n    } else {\n      # active non-blocking mode, send block activity and continue\n      set req.http.X-PX-block-reason = \"cookie_high_score\";\n      call px_send_block_activity;\n\n      set req.http.X-PX-block-activity-sent = \"1\";\n      set req.http.X-PX-validated-request = \"1\";\n      return;\n    }\n  }\n\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" timing: \" time.elapsed.msec \" px_validate_hash_and_expiration - Invalid cookie - ip:\" req.http.Fastly-Client-IP \" method:\" req.request \" time:\" now.sec \" url:\"  req.protocol \":\/\/\" req.http.host req.url \" vid:\" req.http.X-PX-vid \" secret - \" req.http.X-PX-config:cookie-secret \" validity - \" req.http.X-PX-cookie-data:cookie-validity \" uuid - \" req.http.X-PX-uuid \" vid - \" req.http.X-PX-vid \" ua - \" req.http.User-Agent \" pass-hash - \" var.actual_pass_hash \"expected-hash - \" req.http.X-PX-cookie-data:expected-hash;\n  }\n\n  call px_clean_cookie_headers;\n  set req.http.X-PX-ADD-s2s-call-reason = \"cookie_validation_failed\";\n}\n\nsub is_user_blocked_remotely {\n  # check if module is enabled\n  if (req.http.X-PX-config:remote-block == \"0\") {\n    # module is disabled\n    return;\n  }\n\n  # health check\n  declare local var.health_check STRING;\n  set var.health_check = if(table.lookup(px_block_rdata, \"0\") ~ \"health_check=([^&]*)(&|$)\", re.group.1, \"\");\n  if(!time.is_after(std.integer2time(std.atoi(var.health_check)), now)) {\n      # health check is expired\n      return;\n  }\n\n  # calculate key\n  declare local var.key STRING;\n  declare local var.sha1 STRING;\n  declare local var.key_int INTEGER;\n  declare local var.dict_max_size INTEGER;\n  \n  set var.dict_max_size = std.atoi(req.http.X-PX-config:remote-block-max-size);\n  if(var.dict_max_size < 2) {\n    return;\n  }\n\n  set var.dict_max_size -=1;\n  \n  set var.sha1 = digest.hash_sha1(req.http.X-PX-vid);\n  set var.key_int = std.strtol(if(var.sha1 ~ \".{35}(.*)\", re.group.1, \"\"), 16);\n  set var.key_int %= var.dict_max_size;\n  set var.key_int += 1; # 0 is reserved for config\n  set var.key = std.itoa(var.key_int);\n\n  if(std.strstr(table.lookup(px_block_rdata, var.key), req.http.X-PX-vid)) {\n    # block request\n    set req.http.X-PX-BLOCKED-REMOTELY = \"1\";\n  }\n}\n\nsub px_build_props {\n  declare local var.reverse_prefix STRING;\n\n\tset req.http.X-PX-js-ref-tag = \"\";\n\tset req.http.X-PX-css-ref-tag = \"\";\n\n\tif(req.http.X-PX-js-ref != \"\"){\n\t\tset req.http.X-PX-js-ref-tag = \"<script src='\" req.http.X-PX-js-ref \"'><\/script>\";\n\t}\n\n\tif (req.http.X-PX-css-ref != \"\"){\n\t\tset req.http.X-PX-css-ref-tag = {\"<link href=\"\"} req.http.X-PX-css-ref {\"\" rel=\"stylesheet\">\"};\n\t}\n\n  # Setting extra blocking page JS line for first party mode and captcha flow using url vs cookie\n  set req.http.X-PX-template:js-client-src = {\"\/\/client.perimeterx.net\/\"} req.http.X-PX-config:app-id {\"\/main.min.js\"};\n  set req.http.X-PX-template:collector-host = {\"https:\/\/collector-\"} req.http.X-PX-config:app-id {\".perimeterx.net\"};\n  set req.http.X-PX-template:block-src-path = {\"captcha.js?a=\"} req.http.X-PX-action {\"&u=\"} req.http.X-PX-uuid {\"&v=\"} if (req.http.X-PX-vid, req.http.X-PX-vid, \"\") {\"&m=\"} if (req.http.X-PX-ADD-cookie-origin == \"header\", \"1\",\"0\") {\"\"};\n  set req.http.X-PX-template:block-src = {\"\/\/captcha.perimeterx.net\/\"} req.http.X-PX-config:app-id {\"\/\"} req.http.X-PX-template:block-src-path;\n\n  if (req.http.X-PX-config:first-party-mode == \"1\" && req.http.X-PX-ADD-cookie-origin == \"cookie\") {\n      set var.reverse_prefix = regsub(req.http.X-PX-config:app-id, \"^PX\", \"\");\n      set req.http.X-PX-template:js-client-src = \"\/\" var.reverse_prefix \"\/init.js\";\n      set req.http.X-PX-template:collector-host = \"\/\" var.reverse_prefix \"\/xhr\";\n      set req.http.X-PX-template:block-src = \"\/\" var.reverse_prefix \"\/captcha\/\" req.http.X-PX-template:block-src-path;\n  }\n}\n\nsub px_clean_cookie_headers {\n  unset req.http.X-PX-vid;\n  unset req.http.X-PX-ADD-enforcer-vid-source;\n  unset req.http.X-PX-uuid;\n  unset req.http.X-PX-ADD-original-uuid;\n  unset req.http.X-PX-cookie-data:cookie-validity;\n  unset req.http.X-PX-cookie-data:expected-hash;\n  unset req.http.X-PX-original-token-expected-hash;\n  unset req.http.X-PX-decoded-original-token;\n}\n\nsub px_clean_original_token_headers {\n  unset req.http.X-PX-vid;\n  unset req.http.X-PX-ADD-enforcer-vid-source;\n  unset req.http.X-PX-ADD-original-uuid;\n  unset req.http.X-PX-original-token-expected-hash;\n  unset req.http.X-PX-decoded-original-token;\n}\n\nsub px_clean_before_customer_origin {\n  call px_clean_risk_headers;\n  call px_clean_custom_params;\n}\n\nsub px_clean_custom_params {\n  unset bereq.http.X-PX-custom-param1;\n  unset bereq.http.X-PX-custom-param2;\n  unset bereq.http.X-PX-custom-param3;\n  unset bereq.http.X-PX-custom-param4;\n  unset bereq.http.X-PX-custom-param5;\n  unset bereq.http.X-PX-custom-param6;\n  unset bereq.http.X-PX-custom-param7;\n  unset bereq.http.X-PX-custom-param8;\n  unset bereq.http.X-PX-custom-param9;\n  unset bereq.http.X-PX-custom-param10;\n}\n\nsub px_clean_risk_headers {\n  unset bereq.http.X-PX-ADD-px-orig-cookie;\n  unset bereq.http.X-PX-ADD-cookie-origin;\n  unset bereq.http.X-PX-ADD-enforcer-vid-source;\n  unset bereq.http.X-PX-ADD-s2s-call-reason;\n  unset bereq.http.X-PX-ADD-px-cookie;\n  unset bereq.http.X-PX-ADD-original-token;\n  unset bereq.http.X-PX-ADD-original-uuid;\n  unset bereq.http.X-PX-decoded-original-token;\n  unset bereq.http.X-PX-ADD-tls;\n  unset bereq.http.X-PX-ADD-fst-server;\n  unset bereq.http.X-PX-ADD-login-user;\n  unset bereq.http.X-PX-ADD-login-password;\n  unset bereq.http.X-PX-vid;\n}\n\nsub px_clean_module_headers {\n  if (req.http.X-PX-config:enable-debug == \"1\") {\n    log \"syslog \" req.service_id \" \" req.http.X-PX-config:debug-syslog-name \" :: [PX-DEBUG] ReqId: \" req.http.X-PX-Request-ID \" sub px_clean_module_headers\";\n  }\n\n  if (req.http.X-PX-config:pre-clean-enabled == \"1\" && req.http.X-PX-pre-clean-called != \"1\") {\n    set req.http.X-PX-pre-clean-called = \"1\";\n    call px_custom_pre_clean;\n  }\n\n  unset bereq.http.X-PX-error-response;\n  unset bereq.http.X-PX-error-status;\n  unset bereq.http.X-PX-pass-reason;\n  unset bereq.http.X-PX-block-post-request;\n  unset bereq.http.X-PX-block-activity-sent;\n  unset bereq.http.X-PX-Temp-XFF;\n  unset bereq.http.X-PX-validating-s2s;\n  unset bereq.http.X-PX-block-reason;\n  unset bereq.http.X-PX-uuid;\n  unset bereq.http.X-PX-Request-ID;\n  unset bereq.http.X-PX-excluded-extension;\n  unset bereq.http.X-PX-sensitive-route;\n  unset bereq.http.X-PX-enabled-route;\n  unset bereq.http.X-PX-excluded-request;\n  unset bereq.http.X-PX-cookie-data;\n  unset bereq.http.X-PX-action;\n  unset bereq.http.X-PX-action-data;\n  unset bereq.http.X-PX-css-ref;\n  unset bereq.http.X-PX-js-ref;\n  unset bereq.http.X-PX-css-ref-tag;\n  unset bereq.http.X-PX-js-ref-tag;\n  unset bereq.http.X-PX-made-s2s-call;\n  unset bereq.http.X-PX-client-redirect;\n  unset bereq.http.X-PX-xhr-redirect;\n  unset bereq.http.X-PX-original-token-expected-hash;\n  unset bereq.http.X-PX-original-token-validity; \n  unset bereq.http.x-px-debug-timing;\n  unset bereq.http.X-PX-first-party-addition;\n  unset bereq.http.X-PX-additional-activity-headers;\n  unset bereq.http.X-PX-request-exceeded-size-limit;\n  unset bereq.http.X-PX-risk-rtt-start;\n  unset bereq.http.X-PX-risk-rtt;\n  unset bereq.http.X-PX-data-enrichment-payload;\n  unset bereq.http.X-PX-config;\n  unset bereq.http.x-px-pxhd;\n  unset bereq.http.x-px-validated-request;\n  unset bereq.http.x-px-internal-flow;\n  unset bereq.http.should-send-page-requested;\n  unset bereq.http.x-px-data-enrichment-validated;\n  unset bereq.http.login-set;\n  unset bereq.http.x-px-creds;\n}",
            "type": "init"
        },
        {
            "priority": 3,
            "template": "call px_deliver;",
            "type": "deliver"
        },
        {
            "priority": 3,
            "template": "call px_error;",
            "type": "error"
        },
        {
            "priority": 3,
            "template": "call px_fetch;",
            "type": "fetch"
        },
        {
            "priority": 3,
            "template": "call px_miss;",
            "type": "miss"
        },
        {
            "priority": 3,
            "template": "call px_pass;",
            "type": "pass"
        },
        {
            "priority": 3,
            "template": "call px_recv;\n  call px_recv_clustering_fixup;",
            "type": "recv"
        },
        {
            "priority": 2,
            "template": "set var.fastly_req_do_shield = (req.restarts == 0 || (req.restarts == 1 && req.http.X-PX-internal-flow == \"1\" && req.http.X-PX-validated-request == \"1\"));",
            "type": "recv"
        }
    ],
    "version": "7.1.0"
}
